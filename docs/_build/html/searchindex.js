Search.setIndex({"alltitles": {"Compatibility": [[7, "compatibility"]], "Example": [[6, "example"]], "How to use PyBMF": [[7, "how-to-use-pybmf"]], "Indices and tables": [[7, "indices-and-tables"]], "Model parameters": [[3, "model-parameters"]], "Models": [[7, "models"]], "Module contents": [[0, "module-PyBMF"], [1, "module-PyBMF.datasets"], [2, "module-PyBMF.generators"], [3, "module-PyBMF.models"], [4, "module-PyBMF.models.bmf_mp_ravanba"], [5, "module-PyBMF.solvers"], [6, "module-PyBMF.utils"], [7, "module-PyBMF"]], "Parameters": [[2, "parameters"], [2, "id1"], [2, "id2"], [2, "id4"], [3, "parameters"], [3, "id1"], [3, "id2"], [3, "id5"], [3, "id6"], [3, "id8"], [3, "id9"], [3, "id11"], [3, "id12"], [3, "id13"], [3, "id14"], [3, "id15"], [3, "id19"], [3, "id20"], [3, "id22"], [3, "id24"], [3, "id25"], [3, "id27"], [3, "id29"], [3, "id31"], [3, "id33"], [3, "id35"], [3, "id38"], [3, "id40"], [3, "id43"], [3, "id46"], [5, "parameters"], [5, "id1"], [6, "parameters"], [6, "id1"], [6, "id2"], [6, "id3"], [6, "id4"], [6, "id5"], [6, "id6"], [6, "id7"], [6, "id9"], [6, "id11"], [6, "id13"], [6, "id15"], [6, "id16"], [6, "id17"], [6, "id19"], [6, "id20"], [6, "id22"], [6, "id24"], [6, "id26"], [6, "id27"], [6, "id29"], [6, "id31"], [6, "id32"], [6, "id33"], [6, "id34"]], "Prospectives": [[7, "prospectives"]], "PyBMF": [[7, null], [8, null]], "PyBMF package": [[0, null]], "PyBMF.datasets package": [[1, null]], "PyBMF.datasets.BaseData module": [[1, "module-PyBMF.datasets.BaseData"]], "PyBMF.datasets.BaseSplit module": [[1, "module-PyBMF.datasets.BaseSplit"]], "PyBMF.datasets.CrossValidation module": [[1, "module-PyBMF.datasets.CrossValidation"]], "PyBMF.datasets.MovieLensData module": [[1, "module-PyBMF.datasets.MovieLensData"]], "PyBMF.datasets.MovieLensGenreCastData module": [[1, "module-PyBMF.datasets.MovieLensGenreCastData"]], "PyBMF.datasets.MovieLensGenreCastUserData module": [[1, "module-PyBMF.datasets.MovieLensGenreCastUserData"]], "PyBMF.datasets.MovieLensUserData module": [[1, "module-PyBMF.datasets.MovieLensUserData"]], "PyBMF.datasets.NetflixData module": [[1, "module-PyBMF.datasets.NetflixData"]], "PyBMF.datasets.NetflixGenreCastData module": [[1, "module-PyBMF.datasets.NetflixGenreCastData"]], "PyBMF.datasets.NoSplit module": [[1, "module-PyBMF.datasets.NoSplit"]], "PyBMF.datasets.RatioSplit module": [[1, "module-PyBMF.datasets.RatioSplit"]], "PyBMF.generators package": [[2, null]], "PyBMF.generators.BaseGenerator module": [[2, "module-PyBMF.generators.BaseGenerator"]], "PyBMF.generators.BlockDiagonalMatrixGenerator module": [[2, "module-PyBMF.generators.BlockDiagonalMatrixGenerator"]], "PyBMF.generators.BlockMatrixGenerator module": [[2, "module-PyBMF.generators.BlockMatrixGenerator"]], "PyBMF.generators.SyntheticMatrixGenerator module": [[2, "module-PyBMF.generators.SyntheticMatrixGenerator"]], "PyBMF.models package": [[3, null]], "PyBMF.models.Asso module": [[3, "module-PyBMF.models.Asso"]], "PyBMF.models.AssoExAlternateMultipleWeights module": [[3, "pybmf-models-assoexalternatemultipleweights-module"]], "PyBMF.models.AssoIter module": [[3, "module-PyBMF.models.AssoIter"]], "PyBMF.models.AssoOpt module": [[3, "module-PyBMF.models.AssoOpt"]], "PyBMF.models.BMFAlternate module": [[3, "module-PyBMF.models.BMFAlternate"]], "PyBMF.models.BMFCollective module": [[3, "module-PyBMF.models.BMFCollective"]], "PyBMF.models.BMFInterleave module": [[3, "module-PyBMF.models.BMFInterleave"]], "PyBMF.models.BMFTools module": [[3, "module-PyBMF.models.BMFTools"]], "PyBMF.models.BaseCollectiveModel module": [[3, "module-PyBMF.models.BaseCollectiveModel"]], "PyBMF.models.BaseModel module": [[3, "module-PyBMF.models.BaseModel"]], "PyBMF.models.BaseModelTools module": [[3, "module-PyBMF.models.BaseModelTools"]], "PyBMF.models.BinaryMFPenalty module": [[3, "module-PyBMF.models.BinaryMFPenalty"]], "PyBMF.models.BinaryMFPenaltyExCollective module": [[3, "module-PyBMF.models.BinaryMFPenaltyExCollective"]], "PyBMF.models.BinaryMFThreshold module": [[3, "module-PyBMF.models.BinaryMFThreshold"]], "PyBMF.models.BinaryMFThresholdExCollective module": [[3, "module-PyBMF.models.BinaryMFThresholdExCollective"]], "PyBMF.models.BinaryMFThresholdExColumnwise module": [[3, "module-PyBMF.models.BinaryMFThresholdExColumnwise"]], "PyBMF.models.BinaryMFThresholdExSigmoid module": [[3, "module-PyBMF.models.BinaryMFThresholdExSigmoid"]], "PyBMF.models.BinaryMFThresholdExSigmoidColumnwise module": [[3, "module-PyBMF.models.BinaryMFThresholdExSigmoidColumnwise"]], "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda module": [[3, "module-PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda"]], "PyBMF.models.CMF module": [[3, "module-PyBMF.models.CMF"]], "PyBMF.models.ContinuousCollectiveModel module": [[3, "module-PyBMF.models.ContinuousCollectiveModel"]], "PyBMF.models.ContinuousModel module": [[3, "module-PyBMF.models.ContinuousModel"]], "PyBMF.models.ELBMF module": [[3, "module-PyBMF.models.ELBMF"]], "PyBMF.models.ELBMFNumPy module": [[3, "module-PyBMF.models.ELBMFNumPy"]], "PyBMF.models.ELBMFPyTorch module": [[3, "module-PyBMF.models.ELBMFPyTorch"]], "PyBMF.models.FastStep module": [[3, "module-PyBMF.models.FastStep"]], "PyBMF.models.GreConD module": [[3, "module-PyBMF.models.GreConD"]], "PyBMF.models.GreConDPlus module": [[3, "module-PyBMF.models.GreConDPlus"]], "PyBMF.models.Hyper module": [[3, "module-PyBMF.models.Hyper"]], "PyBMF.models.HyperPlus module": [[3, "module-PyBMF.models.HyperPlus"]], "PyBMF.models.IP module": [[3, "module-PyBMF.models.IP"]], "PyBMF.models.MEBF module": [[3, "module-PyBMF.models.MEBF"]], "PyBMF.models.MaxSAT module": [[3, "module-PyBMF.models.MaxSAT"]], "PyBMF.models.MessagePassing module": [[3, "module-PyBMF.models.MessagePassing"]], "PyBMF.models.NMFSklearn module": [[3, "module-PyBMF.models.NMFSklearn"]], "PyBMF.models.OrMachine module": [[3, "module-PyBMF.models.OrMachine"]], "PyBMF.models.PNLPF module": [[3, "module-PyBMF.models.PNLPF"]], "PyBMF.models.PRIMP module": [[3, "module-PyBMF.models.PRIMP"]], "PyBMF.models.PRIMPPyTorch module": [[3, "module-PyBMF.models.PRIMPPyTorch"]], "PyBMF.models.Panda module": [[3, "module-PyBMF.models.Panda"]], "PyBMF.models.RSNMF module": [[3, "module-PyBMF.models.RSNMF"]], "PyBMF.models.TransposedModel module": [[3, "module-PyBMF.models.TransposedModel"]], "PyBMF.models.WNMF module": [[3, "module-PyBMF.models.WNMF"]], "PyBMF.models.bmf_mp_ravanba package": [[4, null]], "PyBMF.models.bmf_mp_ravanba.demo module": [[4, "pybmf-models-bmf-mp-ravanba-demo-module"]], "PyBMF.models.bmf_mp_ravanba.matrix_completion module": [[4, "module-PyBMF.models.bmf_mp_ravanba.matrix_completion"]], "PyBMF.models.bmf_mp_ravanba.utilities module": [[4, "module-PyBMF.models.bmf_mp_ravanba.utilities"]], "PyBMF.solvers package": [[5, null]], "PyBMF.solvers.line_search module": [[5, "module-PyBMF.solvers.line_search"]], "PyBMF.utils package": [[6, null]], "PyBMF.utils.boolean_utils module": [[6, "module-PyBMF.utils.boolean_utils"]], "PyBMF.utils.collective_display_utils module": [[6, "module-PyBMF.utils.collective_display_utils"]], "PyBMF.utils.collective_evaluate_utils module": [[6, "module-PyBMF.utils.collective_evaluate_utils"]], "PyBMF.utils.collective_transform_utils module": [[6, "module-PyBMF.utils.collective_transform_utils"]], "PyBMF.utils.collective_utils module": [[6, "module-PyBMF.utils.collective_utils"]], "PyBMF.utils.common module": [[6, "module-PyBMF.utils.common"]], "PyBMF.utils.data_utils module": [[6, "module-PyBMF.utils.data_utils"]], "PyBMF.utils.dataframe_utils module": [[6, "module-PyBMF.utils.dataframe_utils"]], "PyBMF.utils.decorator_utils module": [[6, "module-PyBMF.utils.decorator_utils"]], "PyBMF.utils.display module": [[6, "module-PyBMF.utils.display"]], "PyBMF.utils.evaluate_utils module": [[6, "module-PyBMF.utils.evaluate_utils"]], "PyBMF.utils.experiment_utils module": [[6, "module-PyBMF.utils.experiment_utils"]], "PyBMF.utils.generator_utils module": [[6, "module-PyBMF.utils.generator_utils"]], "PyBMF.utils.metrics module": [[6, "module-PyBMF.utils.metrics"]], "PyBMF.utils.sparse_utils module": [[6, "module-PyBMF.utils.sparse_utils"]], "Reference": [[3, "reference"], [3, "id3"], [3, "id4"], [3, "id17"], [3, "id18"], [3, "id36"], [3, "id37"], [3, "id39"], [3, "id42"], [3, "id45"], [3, "id48"], [3, "id49"], [3, "id50"], [3, "id51"]], "Return": [[1, "return"]], "Returns": [[2, "returns"], [2, "id3"], [2, "id5"], [3, "returns"], [3, "id7"], [3, "id10"], [3, "id16"], [3, "id21"], [3, "id23"], [3, "id26"], [3, "id28"], [3, "id30"], [3, "id32"], [3, "id34"], [3, "id41"], [3, "id44"], [3, "id47"], [6, "returns"], [6, "id8"], [6, "id10"], [6, "id12"], [6, "id14"], [6, "id18"], [6, "id21"], [6, "id23"], [6, "id25"], [6, "id28"], [6, "id30"], [6, "id35"]], "Submodules": [[1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"]], "Subpackages": [[0, "subpackages"], [3, "subpackages"], [7, "subpackages"]], "System configurations": [[3, "system-configurations"]], "TO-DO": [[7, "to-do"]]}, "docnames": ["PyBMF", "PyBMF.datasets", "PyBMF.generators", "PyBMF.models", "PyBMF.models.bmf_mp_ravanba", "PyBMF.solvers", "PyBMF.utils", "index", "modules"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1}, "filenames": ["PyBMF.rst", "PyBMF.datasets.rst", "PyBMF.generators.rst", "PyBMF.models.rst", "PyBMF.models.bmf_mp_ravanba.rst", "PyBMF.solvers.rst", "PyBMF.utils.rst", "index.rst", "modules.rst"], "indexentries": {"acc() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.ACC", false]], "add() (in module pybmf.utils.boolean_utils)": [[6, "PyBMF.utils.boolean_utils.add", false]], "add() (pybmf.models.bmftools.w_schedulers method)": [[3, "PyBMF.models.BMFTools.w_schedulers.add", false]], "add_noise() (in module pybmf.utils.generator_utils)": [[6, "PyBMF.utils.generator_utils.add_noise", false]], "add_noise() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.add_noise", false]], "approximate_x() (pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda.binarymfthresholdexsigmoidcolumnwiselamda method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda.approximate_X", false]], "approximate_xs() (pybmf.models.binarymfthresholdexcollective.binarymfthresholdexcollective method)": [[3, "PyBMF.models.BinaryMFThresholdExCollective.BinaryMFThresholdExCollective.approximate_Xs", false]], "asso (class in pybmf.models.asso)": [[3, "PyBMF.models.Asso.Asso", false]], "assoiter (class in pybmf.models.assoiter)": [[3, "PyBMF.models.AssoIter.AssoIter", false]], "assoopt (class in pybmf.models.assoopt)": [[3, "PyBMF.models.AssoOpt.AssoOpt", false]], "basecollectivemodel (class in pybmf.models.basecollectivemodel)": [[3, "PyBMF.models.BaseCollectiveModel.BaseCollectiveModel", false]], "basedata (class in pybmf.datasets.basedata)": [[1, "PyBMF.datasets.BaseData.BaseData", false]], "basegenerator (class in pybmf.generators.basegenerator)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator", false]], "basemodel (class in pybmf.models.basemodel)": [[3, "PyBMF.models.BaseModel.BaseModel", false]], "basemodeltools (class in pybmf.models.basemodeltools)": [[3, "PyBMF.models.BaseModelTools.BaseModelTools", false]], "basesplit (class in pybmf.datasets.basesplit)": [[1, "PyBMF.datasets.BaseSplit.BaseSplit", false]], "bidirectional_growth() (pybmf.models.mebf.mebf method)": [[3, "PyBMF.models.MEBF.MEBF.bidirectional_growth", false]], "binarize() (in module pybmf.utils.common)": [[6, "PyBMF.utils.common.binarize", false]], "binarymfpenalty (class in pybmf.models.binarymfpenalty)": [[3, "PyBMF.models.BinaryMFPenalty.BinaryMFPenalty", false]], "binarymfthreshold (class in pybmf.models.binarymfthreshold)": [[3, "PyBMF.models.BinaryMFThreshold.BinaryMFThreshold", false]], "binarymfthresholdexcollective (class in pybmf.models.binarymfthresholdexcollective)": [[3, "PyBMF.models.BinaryMFThresholdExCollective.BinaryMFThresholdExCollective", false]], "binarymfthresholdexcolumnwise (class in pybmf.models.binarymfthresholdexcolumnwise)": [[3, "PyBMF.models.BinaryMFThresholdExColumnwise.BinaryMFThresholdExColumnwise", false]], "binarymfthresholdexsigmoid (class in pybmf.models.binarymfthresholdexsigmoid)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoid.BinaryMFThresholdExSigmoid", false]], "binarymfthresholdexsigmoidcolumnwise (class in pybmf.models.binarymfthresholdexsigmoidcolumnwise)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwise.BinaryMFThresholdExSigmoidColumnwise", false]], "binarymfthresholdexsigmoidcolumnwiselamda (class in pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda", false]], "blockdiagonalmatrixgenerator (class in pybmf.generators)": [[2, "PyBMF.generators.BlockDiagonalMatrixGenerator", false]], "blockdiagonalmatrixgenerator (class in pybmf.generators.blockdiagonalmatrixgenerator)": [[2, "PyBMF.generators.BlockDiagonalMatrixGenerator.BlockDiagonalMatrixGenerator", false]], "blockmatrixgenerator (class in pybmf.generators)": [[2, "PyBMF.generators.BlockMatrixGenerator", false]], "blockmatrixgenerator (class in pybmf.generators.blockmatrixgenerator)": [[2, "PyBMF.generators.BlockMatrixGenerator.BlockMatrixGenerator", false]], "bmfalternate (class in pybmf.models.bmfalternate)": [[3, "PyBMF.models.BMFAlternate.BMFAlternate", false]], "bmfcollective (class in pybmf.models.bmfcollective)": [[3, "PyBMF.models.BMFCollective.BMFCollective", false]], "bmfinterleave (class in pybmf.models.bmfinterleave)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave", false]], "bmftools (class in pybmf.models.bmftools)": [[3, "PyBMF.models.BMFTools.BMFTools", false]], "bool_to_index() (in module pybmf.utils.sparse_utils)": [[6, "PyBMF.utils.sparse_utils.bool_to_index", false]], "boolean_matmul() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.boolean_matmul", false]], "build_assoc() (in module pybmf.models.asso)": [[3, "PyBMF.models.Asso.build_assoc", false]], "build_basis() (in module pybmf.models.asso)": [[3, "PyBMF.models.Asso.build_basis", false]], "check_converge() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.check_converge", false]], "check_merge() (pybmf.models.bmfalternate.bmfalternate method)": [[3, "PyBMF.models.BMFAlternate.BMFAlternate.check_merge", false]], "check_merge() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.check_merge", false]], "check_overlap() (pybmf.generators.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.check_overlap", false]], "check_overlap() (pybmf.generators.blockmatrixgenerator.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.BlockMatrixGenerator.check_overlap", false]], "check_overlap() (pybmf.models.bmfalternate.bmfalternate method)": [[3, "PyBMF.models.BMFAlternate.BMFAlternate.check_overlap", false]], "check_overlap() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.check_overlap", false]], "check_params() (pybmf.datasets.basesplit.basesplit method)": [[1, "PyBMF.datasets.BaseSplit.BaseSplit.check_params", false]], "check_params() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.check_params", false]], "check_params() (pybmf.models.assoiter.assoiter method)": [[3, "PyBMF.models.AssoIter.AssoIter.check_params", false]], "check_params() (pybmf.models.assoopt.assoopt method)": [[3, "PyBMF.models.AssoOpt.AssoOpt.check_params", false]], "check_params() (pybmf.models.basemodel.basemodel method)": [[3, "PyBMF.models.BaseModel.BaseModel.check_params", false]], "check_params() (pybmf.models.binarymfpenalty.binarymfpenalty method)": [[3, "PyBMF.models.BinaryMFPenalty.BinaryMFPenalty.check_params", false]], "check_params() (pybmf.models.binarymfthreshold.binarymfthreshold method)": [[3, "PyBMF.models.BinaryMFThreshold.BinaryMFThreshold.check_params", false]], "check_params() (pybmf.models.binarymfthresholdexcollective.binarymfthresholdexcollective method)": [[3, "PyBMF.models.BinaryMFThresholdExCollective.BinaryMFThresholdExCollective.check_params", false]], "check_params() (pybmf.models.binarymfthresholdexcolumnwise.binarymfthresholdexcolumnwise method)": [[3, "PyBMF.models.BinaryMFThresholdExColumnwise.BinaryMFThresholdExColumnwise.check_params", false]], "check_params() (pybmf.models.binarymfthresholdexsigmoid.binarymfthresholdexsigmoid method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoid.BinaryMFThresholdExSigmoid.check_params", false]], "check_params() (pybmf.models.binarymfthresholdexsigmoidcolumnwise.binarymfthresholdexsigmoidcolumnwise method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwise.BinaryMFThresholdExSigmoidColumnwise.check_params", false]], "check_params() (pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda.binarymfthresholdexsigmoidcolumnwiselamda method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda.check_params", false]], "check_params() (pybmf.models.bmfalternate.bmfalternate method)": [[3, "PyBMF.models.BMFAlternate.BMFAlternate.check_params", false]], "check_params() (pybmf.models.bmfcollective.bmfcollective method)": [[3, "PyBMF.models.BMFCollective.BMFCollective.check_params", false]], "check_params() (pybmf.models.bmfinterleave.bmfinterleave method)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave.check_params", false]], "check_params() (pybmf.models.cmf.cmf method)": [[3, "PyBMF.models.CMF.CMF.check_params", false]], "check_params() (pybmf.models.faststep.faststep method)": [[3, "PyBMF.models.FastStep.FastStep.check_params", false]], "check_params() (pybmf.models.hyperplus.hyperplus method)": [[3, "PyBMF.models.HyperPlus.HyperPlus.check_params", false]], "check_params() (pybmf.models.nmfsklearn.nmfsklearn method)": [[3, "PyBMF.models.NMFSklearn.NMFSklearn.check_params", false]], "check_params() (pybmf.models.panda.panda method)": [[3, "PyBMF.models.Panda.Panda.check_params", false]], "check_params() (pybmf.models.rsnmf.rsnmf method)": [[3, "PyBMF.models.RSNMF.RSNMF.check_params", false]], "check_params() (pybmf.models.wnmf.wnmf method)": [[3, "PyBMF.models.WNMF.WNMF.check_params", false]], "check_remove() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.check_remove", false]], "check_sparse() (in module pybmf.utils.sparse_utils)": [[6, "PyBMF.utils.sparse_utils.check_sparse", false]], "cmf (class in pybmf.models.cmf)": [[3, "PyBMF.models.CMF.CMF", false]], "collective_cover() (in module pybmf.utils.collective_evaluate_utils)": [[6, "PyBMF.utils.collective_evaluate_utils.collective_cover", false]], "concat_factor_info() (in module pybmf.utils.collective_transform_utils)": [[6, "PyBMF.utils.collective_transform_utils.concat_factor_info", false]], "concat_us_into_u() (in module pybmf.utils.collective_transform_utils)": [[6, "PyBMF.utils.collective_transform_utils.concat_Us_into_U", false]], "concat_xs_into_x() (in module pybmf.utils.collective_transform_utils)": [[6, "PyBMF.utils.collective_transform_utils.concat_Xs_into_X", false]], "continuouscollectivemodel (class in pybmf.models.continuouscollectivemodel)": [[3, "PyBMF.models.ContinuousCollectiveModel.ContinuousCollectiveModel", false]], "continuousmodel (class in pybmf.models.continuousmodel)": [[3, "PyBMF.models.ContinuousModel.ContinuousModel", false]], "cost() (pybmf.models.hyper.hyper static method)": [[3, "PyBMF.models.Hyper.Hyper.cost", false]], "cost_savings() (in module pybmf.models.hyperplus)": [[3, "PyBMF.models.HyperPlus.cost_savings", false]], "coverage_score() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.coverage_score", false]], "crossvalidation (class in pybmf.datasets.crossvalidation)": [[1, "PyBMF.datasets.CrossValidation.CrossValidation", false]], "d2f() (pybmf.models.binarymfthresholdexcolumnwise.binarymfthresholdexcolumnwise method)": [[3, "PyBMF.models.BinaryMFThresholdExColumnwise.BinaryMFThresholdExColumnwise.d2F", false]], "d2f() (pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda.binarymfthresholdexsigmoidcolumnwiselamda method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda.d2F", false]], "d2xdx2() (pybmf.models.binarymfthresholdexcolumnwise.binarymfthresholdexcolumnwise method)": [[3, "PyBMF.models.BinaryMFThresholdExColumnwise.BinaryMFThresholdExColumnwise.d2Xdx2", false]], "d2xdx2() (pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda.binarymfthresholdexsigmoidcolumnwiselamda method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda.d2Xdx2", false]], "d_sigmoid() (in module pybmf.utils.common)": [[6, "PyBMF.utils.common.d_sigmoid", false]], "density() (in module pybmf.models.bmf_mp_ravanba.utilities)": [[4, "PyBMF.models.bmf_mp_ravanba.utilities.density", false]], "description_length() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.description_length", false]], "df() (pybmf.models.binarymfthreshold.binarymfthreshold method)": [[3, "PyBMF.models.BinaryMFThreshold.BinaryMFThreshold.dF", false]], "df() (pybmf.models.binarymfthresholdexcollective.binarymfthresholdexcollective method)": [[3, "PyBMF.models.BinaryMFThresholdExCollective.BinaryMFThresholdExCollective.dF", false]], "df() (pybmf.models.binarymfthresholdexcolumnwise.binarymfthresholdexcolumnwise method)": [[3, "PyBMF.models.BinaryMFThresholdExColumnwise.BinaryMFThresholdExColumnwise.dF", false]], "df() (pybmf.models.binarymfthresholdexsigmoid.binarymfthresholdexsigmoid method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoid.BinaryMFThresholdExSigmoid.dF", false]], "df() (pybmf.models.binarymfthresholdexsigmoidcolumnwise.binarymfthresholdexsigmoidcolumnwise method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwise.BinaryMFThresholdExSigmoidColumnwise.dF", false]], "df() (pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda.binarymfthresholdexsigmoidcolumnwiselamda method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda.dF", false]], "df() (pybmf.models.faststep.faststep method)": [[3, "PyBMF.models.FastStep.FastStep.dF", false]], "dot() (in module pybmf.utils.boolean_utils)": [[6, "PyBMF.utils.boolean_utils.dot", false]], "dump_pickle() (pybmf.datasets.basedata.basedata method)": [[1, "PyBMF.datasets.BaseData.BaseData.dump_pickle", false]], "dxdlamda() (pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda.binarymfthresholdexsigmoidcolumnwiselamda method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda.dXdlamda", false]], "dxdx() (pybmf.models.binarymfthreshold.binarymfthreshold method)": [[3, "PyBMF.models.BinaryMFThreshold.BinaryMFThreshold.dXdx", false]], "dxdx() (pybmf.models.binarymfthresholdexcollective.binarymfthresholdexcollective method)": [[3, "PyBMF.models.BinaryMFThresholdExCollective.BinaryMFThresholdExCollective.dXdx", false]], "dxdx() (pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda.binarymfthresholdexsigmoidcolumnwiselamda method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda.dXdx", false]], "early_stop() (pybmf.models.basemodeltools.basemodeltools method)": [[3, "PyBMF.models.BaseModelTools.BaseModelTools.early_stop", false]], "early_stop() (pybmf.models.faststep.faststep method)": [[3, "PyBMF.models.FastStep.FastStep.early_stop", false]], "elbmf (class in pybmf.models.elbmf)": [[3, "PyBMF.models.ELBMF.ELBMF", false]], "elbmf (class in pybmf.models.elbmfnumpy)": [[3, "PyBMF.models.ELBMFNumPy.ELBMF", false]], "elbmf (class in pybmf.models.elbmfpytorch)": [[3, "PyBMF.models.ELBMFPyTorch.ELBMF", false]], "elbmf() (in module pybmf.models.elbmfpytorch)": [[3, "PyBMF.models.ELBMFPyTorch.elbmf", false]], "elbmf_ipalm() (in module pybmf.models.elbmfpytorch)": [[3, "PyBMF.models.ELBMFPyTorch.elbmf_ipalm", false]], "elbmf_ipalm() (in module pybmf.models.primp)": [[3, "PyBMF.models.PRIMP.elbmf_ipalm", false]], "elbmf_ipalm() (in module pybmf.models.primppytorch)": [[3, "PyBMF.models.PRIMPPyTorch.elbmf_ipalm", false]], "elbmf_step_ipalm() (in module pybmf.models.elbmfpytorch)": [[3, "PyBMF.models.ELBMFPyTorch.elbmf_step_ipalm", false]], "elbmf_step_ipalm() (in module pybmf.models.primp)": [[3, "PyBMF.models.PRIMP.elbmf_step_ipalm", false]], "elbmf_step_ipalm() (in module pybmf.models.primppytorch)": [[3, "PyBMF.models.PRIMPPyTorch.elbmf_step_ipalm", false]], "err() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.ERR", false]], "error() (in module pybmf.models.binarymfpenalty)": [[3, "PyBMF.models.BinaryMFPenalty.error", false]], "error() (pybmf.models.cmf.cmf method)": [[3, "PyBMF.models.CMF.CMF.error", false]], "error() (pybmf.models.wnmf.wnmf method)": [[3, "PyBMF.models.WNMF.WNMF.error", false]], "eval() (in module pybmf.utils.evaluate_utils)": [[6, "PyBMF.utils.evaluate_utils.eval", false]], "evaluate() (pybmf.models.basecollectivemodel.basecollectivemodel method)": [[3, "PyBMF.models.BaseCollectiveModel.BaseCollectiveModel.evaluate", false]], "evaluate() (pybmf.models.basemodel.basemodel method)": [[3, "PyBMF.models.BaseModel.BaseModel.evaluate", false]], "exclusive_cost() (pybmf.models.bmfalternate.bmfalternate method)": [[3, "PyBMF.models.BMFAlternate.BMFAlternate.exclusive_cost", false]], "exclusive_dl() (pybmf.models.bmfinterleave.bmfinterleave method)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave.exclusive_dl", false]], "exclusive_score() (pybmf.models.bmfinterleave.bmfinterleave method)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave.exclusive_score", false]], "expansion() (in module pybmf.models.grecondplus)": [[3, "PyBMF.models.GreConDPlus.expansion", false]], "extend_core() (pybmf.models.panda.panda method)": [[3, "PyBMF.models.Panda.Panda.extend_core", false]], "extend_factors() (pybmf.models.basemodeltools.basemodeltools method)": [[3, "PyBMF.models.BaseModelTools.BaseModelTools.extend_factors", false]], "f() (pybmf.models.binarymfthreshold.binarymfthreshold method)": [[3, "PyBMF.models.BinaryMFThreshold.BinaryMFThreshold.F", false]], "f() (pybmf.models.binarymfthresholdexcollective.binarymfthresholdexcollective method)": [[3, "PyBMF.models.BinaryMFThresholdExCollective.BinaryMFThresholdExCollective.F", false]], "f() (pybmf.models.binarymfthresholdexcolumnwise.binarymfthresholdexcolumnwise method)": [[3, "PyBMF.models.BinaryMFThresholdExColumnwise.BinaryMFThresholdExColumnwise.F", false]], "f() (pybmf.models.binarymfthresholdexsigmoid.binarymfthresholdexsigmoid method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoid.BinaryMFThresholdExSigmoid.F", false]], "f() (pybmf.models.binarymfthresholdexsigmoidcolumnwise.binarymfthresholdexsigmoidcolumnwise method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwise.BinaryMFThresholdExSigmoidColumnwise.F", false]], "f() (pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda.binarymfthresholdexsigmoidcolumnwiselamda method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda.F", false]], "f() (pybmf.models.faststep.faststep method)": [[3, "PyBMF.models.FastStep.FastStep.F", false]], "f1() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.F1", false]], "factorize() (pybmf.models.elbmfnumpy.elbmf method)": [[3, "PyBMF.models.ELBMFNumPy.ELBMF.factorize", false]], "faststep (class in pybmf.models.faststep)": [[3, "PyBMF.models.FastStep.FastStep", false]], "fill_nan() (in module pybmf.utils.display)": [[6, "PyBMF.utils.display.fill_nan", false]], "find_core() (pybmf.models.panda.panda method)": [[3, "PyBMF.models.Panda.Panda.find_core", false]], "find_hyper() (pybmf.models.hyper.hyper static method)": [[3, "PyBMF.models.Hyper.Hyper.find_hyper", false]], "finish() (pybmf.models.basemodel.basemodel method)": [[3, "PyBMF.models.BaseModel.BaseModel.finish", false]], "fit() (pybmf.models.asso.asso method)": [[3, "PyBMF.models.Asso.Asso.fit", false]], "fit() (pybmf.models.assoiter.assoiter method)": [[3, "PyBMF.models.AssoIter.AssoIter.fit", false]], "fit() (pybmf.models.assoopt.assoopt method)": [[3, "PyBMF.models.AssoOpt.AssoOpt.fit", false]], "fit() (pybmf.models.basecollectivemodel.basecollectivemodel method)": [[3, "PyBMF.models.BaseCollectiveModel.BaseCollectiveModel.fit", false]], "fit() (pybmf.models.basemodel.basemodel method)": [[3, "PyBMF.models.BaseModel.BaseModel.fit", false]], "fit() (pybmf.models.binarymfpenalty.binarymfpenalty method)": [[3, "PyBMF.models.BinaryMFPenalty.BinaryMFPenalty.fit", false]], "fit() (pybmf.models.binarymfthreshold.binarymfthreshold method)": [[3, "PyBMF.models.BinaryMFThreshold.BinaryMFThreshold.fit", false]], "fit() (pybmf.models.binarymfthresholdexcollective.binarymfthresholdexcollective method)": [[3, "PyBMF.models.BinaryMFThresholdExCollective.BinaryMFThresholdExCollective.fit", false]], "fit() (pybmf.models.binarymfthresholdexcolumnwise.binarymfthresholdexcolumnwise method)": [[3, "PyBMF.models.BinaryMFThresholdExColumnwise.BinaryMFThresholdExColumnwise.fit", false]], "fit() (pybmf.models.binarymfthresholdexsigmoidcolumnwise.binarymfthresholdexsigmoidcolumnwise method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwise.BinaryMFThresholdExSigmoidColumnwise.fit", false]], "fit() (pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda.binarymfthresholdexsigmoidcolumnwiselamda method)": [[3, "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda.fit", false]], "fit() (pybmf.models.bmfalternate.bmfalternate method)": [[3, "PyBMF.models.BMFAlternate.BMFAlternate.fit", false]], "fit() (pybmf.models.bmfcollective.bmfcollective method)": [[3, "PyBMF.models.BMFCollective.BMFCollective.fit", false]], "fit() (pybmf.models.bmfinterleave.bmfinterleave method)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave.fit", false]], "fit() (pybmf.models.cmf.cmf method)": [[3, "PyBMF.models.CMF.CMF.fit", false]], "fit() (pybmf.models.elbmf.elbmf method)": [[3, "PyBMF.models.ELBMF.ELBMF.fit", false]], "fit() (pybmf.models.elbmfpytorch.elbmf method)": [[3, "PyBMF.models.ELBMFPyTorch.ELBMF.fit", false]], "fit() (pybmf.models.faststep.faststep method)": [[3, "PyBMF.models.FastStep.FastStep.fit", false]], "fit() (pybmf.models.grecond.grecond method)": [[3, "PyBMF.models.GreConD.GreConD.fit", false]], "fit() (pybmf.models.grecondplus.grecondplus method)": [[3, "PyBMF.models.GreConDPlus.GreConDPlus.fit", false]], "fit() (pybmf.models.hyper.hyper method)": [[3, "PyBMF.models.Hyper.Hyper.fit", false]], "fit() (pybmf.models.hyperplus.hyperplus method)": [[3, "PyBMF.models.HyperPlus.HyperPlus.fit", false]], "fit() (pybmf.models.maxsat.maxsat method)": [[3, "PyBMF.models.MaxSAT.MaxSAT.fit", false]], "fit() (pybmf.models.mebf.mebf method)": [[3, "PyBMF.models.MEBF.MEBF.fit", false]], "fit() (pybmf.models.messagepassing.messagepassing method)": [[3, "PyBMF.models.MessagePassing.MessagePassing.fit", false]], "fit() (pybmf.models.nmfsklearn.nmfsklearn method)": [[3, "PyBMF.models.NMFSklearn.NMFSklearn.fit", false]], "fit() (pybmf.models.ormachine.ormachine method)": [[3, "PyBMF.models.OrMachine.OrMachine.fit", false]], "fit() (pybmf.models.panda.panda method)": [[3, "PyBMF.models.Panda.Panda.fit", false]], "fit() (pybmf.models.primp.primp method)": [[3, "PyBMF.models.PRIMP.PRIMP.fit", false]], "fit() (pybmf.models.primppytorch.primp method)": [[3, "PyBMF.models.PRIMPPyTorch.PRIMP.fit", false]], "fit() (pybmf.models.rsnmf.rsnmf method)": [[3, "PyBMF.models.RSNMF.RSNMF.fit", false]], "fit() (pybmf.models.transposedmodel.transposedmodel method)": [[3, "PyBMF.models.TransposedModel.TransposedModel.fit", false]], "fit() (pybmf.models.wnmf.wnmf method)": [[3, "PyBMF.models.WNMF.WNMF.fit", false]], "fn() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.FN", false]], "fnr() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.FNR", false]], "fp() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.FP", false]], "fpr() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.FPR", false]], "generate() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.generate", false]], "generate() (pybmf.generators.blockdiagonalmatrixgenerator method)": [[2, "PyBMF.generators.BlockDiagonalMatrixGenerator.generate", false]], "generate() (pybmf.generators.blockdiagonalmatrixgenerator.blockdiagonalmatrixgenerator method)": [[2, "PyBMF.generators.BlockDiagonalMatrixGenerator.BlockDiagonalMatrixGenerator.generate", false]], "generate() (pybmf.generators.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.generate", false]], "generate() (pybmf.generators.blockmatrixgenerator.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.BlockMatrixGenerator.generate", false]], "generate() (pybmf.generators.syntheticmatrixgenerator method)": [[2, "PyBMF.generators.SyntheticMatrixGenerator.generate", false]], "generate() (pybmf.generators.syntheticmatrixgenerator.syntheticmatrixgenerator method)": [[2, "PyBMF.generators.SyntheticMatrixGenerator.SyntheticMatrixGenerator.generate", false]], "generate_factor() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.generate_factor", false]], "generate_factor() (pybmf.generators.blockdiagonalmatrixgenerator method)": [[2, "PyBMF.generators.BlockDiagonalMatrixGenerator.generate_factor", false]], "generate_factor() (pybmf.generators.blockdiagonalmatrixgenerator.blockdiagonalmatrixgenerator method)": [[2, "PyBMF.generators.BlockDiagonalMatrixGenerator.BlockDiagonalMatrixGenerator.generate_factor", false]], "generate_factor() (pybmf.generators.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.generate_factor", false]], "generate_factor() (pybmf.generators.blockmatrixgenerator.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.BlockMatrixGenerator.generate_factor", false]], "generate_factor() (pybmf.generators.syntheticmatrixgenerator method)": [[2, "PyBMF.generators.SyntheticMatrixGenerator.generate_factor", false]], "generate_factor() (pybmf.generators.syntheticmatrixgenerator.syntheticmatrixgenerator method)": [[2, "PyBMF.generators.SyntheticMatrixGenerator.SyntheticMatrixGenerator.generate_factor", false]], "generate_factor_points() (pybmf.generators.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.generate_factor_points", false]], "generate_factor_points() (pybmf.generators.blockmatrixgenerator.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.BlockMatrixGenerator.generate_factor_points", false]], "generate_factors() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.generate_factors", false]], "generate_factors() (pybmf.generators.blockdiagonalmatrixgenerator method)": [[2, "PyBMF.generators.BlockDiagonalMatrixGenerator.generate_factors", false]], "generate_factors() (pybmf.generators.blockdiagonalmatrixgenerator.blockdiagonalmatrixgenerator method)": [[2, "PyBMF.generators.BlockDiagonalMatrixGenerator.BlockDiagonalMatrixGenerator.generate_factors", false]], "generate_factors() (pybmf.generators.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.generate_factors", false]], "generate_factors() (pybmf.generators.blockmatrixgenerator.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.BlockMatrixGenerator.generate_factors", false]], "generate_factors() (pybmf.generators.syntheticmatrixgenerator method)": [[2, "PyBMF.generators.SyntheticMatrixGenerator.generate_factors", false]], "generate_factors() (pybmf.generators.syntheticmatrixgenerator.syntheticmatrixgenerator method)": [[2, "PyBMF.generators.SyntheticMatrixGenerator.SyntheticMatrixGenerator.generate_factors", false]], "get_attribute_info() (pybmf.datasets.movielensgenrecastdata.movielensgenrecastdata method)": [[1, "PyBMF.datasets.MovieLensGenreCastData.MovieLensGenreCastData.get_attribute_info", false]], "get_attribute_info() (pybmf.datasets.netflixgenrecastdata.netflixgenrecastdata method)": [[1, "PyBMF.datasets.NetflixGenreCastData.NetflixGenreCastData.get_attribute_info", false]], "get_basis_dim() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.get_basis_dim", false]], "get_concept() (in module pybmf.models.grecond)": [[3, "PyBMF.models.GreConD.get_concept", false]], "get_dummy_factor_info() (in module pybmf.utils.collective_utils)": [[6, "PyBMF.utils.collective_utils.get_dummy_factor_info", false]], "get_factor() (pybmf.models.mebf.mebf method)": [[3, "PyBMF.models.MEBF.MEBF.get_factor", false]], "get_factor_dims() (in module pybmf.utils.collective_utils)": [[6, "PyBMF.utils.collective_utils.get_factor_dims", false]], "get_factor_list() (in module pybmf.utils.collective_utils)": [[6, "PyBMF.utils.collective_utils.get_factor_list", false]], "get_factor_starts() (in module pybmf.utils.collective_utils)": [[6, "PyBMF.utils.collective_utils.get_factor_starts", false]], "get_fold() (pybmf.datasets.crossvalidation.crossvalidation method)": [[1, "PyBMF.datasets.CrossValidation.CrossValidation.get_fold", false]], "get_indices() (pybmf.datasets.crossvalidation.crossvalidation static method)": [[1, "PyBMF.datasets.CrossValidation.CrossValidation.get_indices", false]], "get_indices() (pybmf.datasets.ratiosplit.ratiosplit static method)": [[1, "PyBMF.datasets.RatioSplit.RatioSplit.get_indices", false]], "get_integrality_gap() (in module pybmf.models.elbmf)": [[3, "PyBMF.models.ELBMF.get_integrality_gap", false]], "get_matrices() (in module pybmf.utils.collective_utils)": [[6, "PyBMF.utils.collective_utils.get_matrices", false]], "get_metrics() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.get_metrics", false]], "get_model_by_path() (in module pybmf.utils.experiment_utils)": [[6, "PyBMF.utils.experiment_utils.get_model_by_path", false]], "get_model_by_time() (in module pybmf.utils.experiment_utils)": [[6, "PyBMF.utils.experiment_utils.get_model_by_time", false]], "get_neg_indices() (pybmf.datasets.basesplit.basesplit method)": [[1, "PyBMF.datasets.BaseSplit.BaseSplit.get_neg_indices", false]], "get_overlappings() (pybmf.models.bmfinterleave.bmfinterleave method)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave.get_overlappings", false]], "get_overlaps() (pybmf.models.bmfalternate.bmfalternate method)": [[3, "PyBMF.models.BMFAlternate.BMFAlternate.get_overlaps", false]], "get_partition() (pybmf.datasets.crossvalidation.crossvalidation static method)": [[1, "PyBMF.datasets.CrossValidation.CrossValidation.get_partition", false]], "get_prediction() (in module pybmf.utils.common)": [[6, "PyBMF.utils.common.get_prediction", false]], "get_prediction() (pybmf.models.binarymfpenalty.binarymfpenalty method)": [[3, "PyBMF.models.BinaryMFPenalty.BinaryMFPenalty.get_prediction", false]], "get_prediction() (pybmf.models.pnlpf.pnlpf method)": [[3, "PyBMF.models.PNLPF.PNLPF.get_prediction", false]], "get_prediction_with_sigmoid() (in module pybmf.models.binarymfthresholdexcolumnwise)": [[3, "PyBMF.models.BinaryMFThresholdExColumnwise.get_prediction_with_sigmoid", false]], "get_prediction_with_sigmoid() (in module pybmf.models.pnlpf)": [[3, "PyBMF.models.PNLPF.get_prediction_with_sigmoid", false]], "get_prediction_with_threshold() (in module pybmf.utils.common)": [[6, "PyBMF.utils.common.get_prediction_with_threshold", false]], "get_random_matrices() (in module pybmf.models.bmf_mp_ravanba.utilities)": [[4, "PyBMF.models.bmf_mp_ravanba.utilities.get_random_matrices", false]], "get_refined_column() (pybmf.models.assoiter.assoiter method)": [[3, "PyBMF.models.AssoIter.AssoIter.get_refined_column", false]], "get_residual() (in module pybmf.utils.common)": [[6, "PyBMF.utils.common.get_residual", false]], "get_rng() (in module pybmf.utils.common)": [[6, "PyBMF.utils.common.get_rng", false]], "get_settings() (in module pybmf.utils.collective_display_utils)": [[6, "PyBMF.utils.collective_display_utils.get_settings", false]], "get_size() (pybmf.datasets.ratiosplit.ratiosplit static method)": [[1, "PyBMF.datasets.RatioSplit.RatioSplit.get_size", false]], "get_size_inches() (in module pybmf.utils.display)": [[6, "PyBMF.utils.display.get_size_inches", false]], "get_user_profile() (pybmf.datasets.movielensuserdata.movielensuserdata method)": [[1, "PyBMF.datasets.MovieLensUserData.MovieLensUserData.get_user_profile", false]], "get_vector() (in module pybmf.models.asso)": [[3, "PyBMF.models.Asso.get_vector", false]], "get_vector() (pybmf.models.bmfcollective.bmfcollective static method)": [[3, "PyBMF.models.BMFCollective.BMFCollective.get_vector", false]], "get_vector() (pybmf.models.bmfinterleave.bmfinterleave method)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave.get_vector", false]], "get_weak_signal() (pybmf.models.mebf.mebf method)": [[3, "PyBMF.models.MEBF.MEBF.get_weak_signal", false]], "get_x_pd_rest() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.get_X_pd_rest", false]], "grecond (class in pybmf.models.grecond)": [[3, "PyBMF.models.GreConD.GreConD", false]], "grecondplus (class in pybmf.models.grecondplus)": [[3, "PyBMF.models.GreConDPlus.GreConDPlus", false]], "hamming() (in module pybmf.models.bmf_mp_ravanba.utilities)": [[4, "PyBMF.models.bmf_mp_ravanba.utilities.hamming", false]], "harmonic_score() (in module pybmf.utils.collective_evaluate_utils)": [[6, "PyBMF.utils.collective_evaluate_utils.harmonic_score", false]], "has_pickle (pybmf.datasets.basedata.basedata property)": [[1, "PyBMF.datasets.BaseData.BaseData.has_pickle", false]], "header() (in module pybmf.utils.evaluate_utils)": [[6, "PyBMF.utils.evaluate_utils.header", false]], "hyper (class in pybmf.models.hyper)": [[3, "PyBMF.models.Hyper.Hyper", false]], "hyperplus (class in pybmf.models.hyperplus)": [[3, "PyBMF.models.HyperPlus.HyperPlus", false]], "ignore_warnings() (in module pybmf.utils.decorator_utils)": [[6, "PyBMF.utils.decorator_utils.ignore_warnings", false]], "import_model() (pybmf.models.basemodeltools.basemodeltools method)": [[3, "PyBMF.models.BaseModelTools.BaseModelTools.import_model", false]], "index_to_bool() (in module pybmf.utils.sparse_utils)": [[6, "PyBMF.utils.sparse_utils.index_to_bool", false]], "init_basis() (pybmf.models.bmfcollective.bmfcollective method)": [[3, "PyBMF.models.BMFCollective.BMFCollective.init_basis", false]], "init_basis() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.init_basis", false]], "init_basis_asso() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.init_basis_asso", false]], "init_basis_random_bits() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.init_basis_random_bits", false]], "init_basis_random_rows() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.init_basis_random_rows", false]], "init_cover() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.init_cover", false]], "init_factorization() (pybmf.models.elbmfnumpy.elbmf method)": [[3, "PyBMF.models.ELBMFNumPy.ELBMF.init_factorization", false]], "init_itemsets() (pybmf.models.hyper.hyper method)": [[3, "PyBMF.models.Hyper.Hyper.init_itemsets", false]], "init_model() (pybmf.models.asso.asso method)": [[3, "PyBMF.models.Asso.Asso.init_model", false]], "init_model() (pybmf.models.assoiter.assoiter method)": [[3, "PyBMF.models.AssoIter.AssoIter.init_model", false]], "init_model() (pybmf.models.assoopt.assoopt method)": [[3, "PyBMF.models.AssoOpt.AssoOpt.init_model", false]], "init_model() (pybmf.models.basecollectivemodel.basecollectivemodel method)": [[3, "PyBMF.models.BaseCollectiveModel.BaseCollectiveModel.init_model", false]], "init_model() (pybmf.models.basemodel.basemodel method)": [[3, "PyBMF.models.BaseModel.BaseModel.init_model", false]], "init_model() (pybmf.models.binarymfpenalty.binarymfpenalty method)": [[3, "PyBMF.models.BinaryMFPenalty.BinaryMFPenalty.init_model", false]], "init_model() (pybmf.models.binarymfthreshold.binarymfthreshold method)": [[3, "PyBMF.models.BinaryMFThreshold.BinaryMFThreshold.init_model", false]], "init_model() (pybmf.models.binarymfthresholdexcollective.binarymfthresholdexcollective method)": [[3, "PyBMF.models.BinaryMFThresholdExCollective.BinaryMFThresholdExCollective.init_model", false]], "init_model() (pybmf.models.bmfalternate.bmfalternate method)": [[3, "PyBMF.models.BMFAlternate.BMFAlternate.init_model", false]], "init_model() (pybmf.models.bmfinterleave.bmfinterleave method)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave.init_model", false]], "init_model() (pybmf.models.cmf.cmf method)": [[3, "PyBMF.models.CMF.CMF.init_model", false]], "init_model() (pybmf.models.continuouscollectivemodel.continuouscollectivemodel method)": [[3, "PyBMF.models.ContinuousCollectiveModel.ContinuousCollectiveModel.init_model", false]], "init_model() (pybmf.models.continuousmodel.continuousmodel method)": [[3, "PyBMF.models.ContinuousModel.ContinuousModel.init_model", false]], "init_model() (pybmf.models.elbmf.elbmf method)": [[3, "PyBMF.models.ELBMF.ELBMF.init_model", false]], "init_model() (pybmf.models.faststep.faststep method)": [[3, "PyBMF.models.FastStep.FastStep.init_model", false]], "init_model() (pybmf.models.hyper.hyper method)": [[3, "PyBMF.models.Hyper.Hyper.init_model", false]], "init_model() (pybmf.models.wnmf.wnmf method)": [[3, "PyBMF.models.WNMF.WNMF.init_model", false]], "init_msgs_n_marginals() (pybmf.models.bmf_mp_ravanba.matrix_completion.matrixcompletion method)": [[4, "PyBMF.models.bmf_mp_ravanba.matrix_completion.MatrixCompletion.init_msgs_n_marginals", false]], "init_transactions() (pybmf.models.hyper.hyper method)": [[3, "PyBMF.models.Hyper.Hyper.init_transactions", false]], "init_us() (pybmf.models.continuouscollectivemodel.continuouscollectivemodel method)": [[3, "PyBMF.models.ContinuousCollectiveModel.ContinuousCollectiveModel.init_Us", false]], "init_uv() (pybmf.models.continuousmodel.continuousmodel method)": [[3, "PyBMF.models.ContinuousModel.ContinuousModel.init_UV", false]], "init_w() (pybmf.models.continuousmodel.continuousmodel method)": [[3, "PyBMF.models.ContinuousModel.ContinuousModel.init_W", false]], "init_ws() (pybmf.models.continuouscollectivemodel.continuouscollectivemodel method)": [[3, "PyBMF.models.ContinuousCollectiveModel.ContinuousCollectiveModel.init_Ws", false]], "int2bin() (in module pybmf.models.assoopt)": [[3, "PyBMF.models.AssoOpt.int2bin", false]], "integrality_gap_elastic() (in module pybmf.models.elbmfpytorch)": [[3, "PyBMF.models.ELBMFPyTorch.integrality_gap_elastic", false]], "integrality_gap_elastic() (in module pybmf.models.primp)": [[3, "PyBMF.models.PRIMP.integrality_gap_elastic", false]], "integrality_gap_elastic() (in module pybmf.models.primppytorch)": [[3, "PyBMF.models.PRIMPPyTorch.integrality_gap_elastic", false]], "invert() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.invert", false]], "ip (class in pybmf.models.ip)": [[3, "PyBMF.models.IP.IP", false]], "ipalm() (pybmf.models.elbmf.elbmf method)": [[3, "PyBMF.models.ELBMF.ELBMF.iPALM", false]], "is_overlapped() (pybmf.generators.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.is_overlapped", false]], "is_overlapped() (pybmf.generators.blockmatrixgenerator.blockmatrixgenerator method)": [[2, "PyBMF.generators.BlockMatrixGenerator.BlockMatrixGenerator.is_overlapped", false]], "ismat() (in module pybmf.utils.boolean_utils)": [[6, "PyBMF.utils.boolean_utils.ismat", false]], "isnum() (in module pybmf.utils.boolean_utils)": [[6, "PyBMF.utils.boolean_utils.isnum", false]], "line_search() (in module pybmf.solvers)": [[5, "PyBMF.solvers.line_search", false]], "line_search() (in module pybmf.solvers.line_search)": [[5, "PyBMF.solvers.line_search.line_search", false]], "load() (pybmf.datasets.basedata.basedata method)": [[1, "PyBMF.datasets.BaseData.BaseData.load", false]], "load_data() (pybmf.datasets.basedata.basedata method)": [[1, "PyBMF.datasets.BaseData.BaseData.load_data", false]], "load_data() (pybmf.datasets.movielensdata.movielensdata method)": [[1, "PyBMF.datasets.MovieLensData.MovieLensData.load_data", false]], "load_data() (pybmf.datasets.movielensgenrecastdata.movielensgenrecastdata method)": [[1, "PyBMF.datasets.MovieLensGenreCastData.MovieLensGenreCastData.load_data", false]], "load_data() (pybmf.datasets.movielensgenrecastuserdata.movielensgenrecastuserdata method)": [[1, "PyBMF.datasets.MovieLensGenreCastUserData.MovieLensGenreCastUserData.load_data", false]], "load_data() (pybmf.datasets.movielensuserdata.movielensuserdata method)": [[1, "PyBMF.datasets.MovieLensUserData.MovieLensUserData.load_data", false]], "load_data() (pybmf.datasets.netflixdata.netflixdata method)": [[1, "PyBMF.datasets.NetflixData.NetflixData.load_data", false]], "load_data() (pybmf.datasets.netflixgenrecastdata.netflixgenrecastdata method)": [[1, "PyBMF.datasets.NetflixGenreCastData.NetflixGenreCastData.load_data", false]], "load_dataset() (pybmf.models.basecollectivemodel.basecollectivemodel method)": [[3, "PyBMF.models.BaseCollectiveModel.BaseCollectiveModel.load_dataset", false]], "load_dataset() (pybmf.models.basemodel.basemodel method)": [[3, "PyBMF.models.BaseModel.BaseModel.load_dataset", false]], "load_neg_data() (pybmf.datasets.basesplit.basesplit method)": [[1, "PyBMF.datasets.BaseSplit.BaseSplit.load_neg_data", false]], "load_pos_data() (pybmf.datasets.basesplit.basesplit method)": [[1, "PyBMF.datasets.BaseSplit.BaseSplit.load_pos_data", false]], "log2html() (in module pybmf.utils.dataframe_utils)": [[6, "PyBMF.utils.dataframe_utils.log2html", false]], "log2latex() (in module pybmf.utils.dataframe_utils)": [[6, "PyBMF.utils.dataframe_utils.log2latex", false]], "log_ratio() (in module pybmf.models.bmf_mp_ravanba.utilities)": [[4, "PyBMF.models.bmf_mp_ravanba.utilities.log_ratio", false]], "mae() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.MAE", false]], "matmul() (in module pybmf.utils.boolean_utils)": [[6, "PyBMF.utils.boolean_utils.matmul", false]], "matrixcompletion (class in pybmf.models.bmf_mp_ravanba.matrix_completion)": [[4, "PyBMF.models.bmf_mp_ravanba.matrix_completion.MatrixCompletion", false]], "maxsat (class in pybmf.models.maxsat)": [[3, "PyBMF.models.MaxSAT.MaxSAT", false]], "mean() (in module pybmf.utils.data_utils)": [[6, "PyBMF.utils.data_utils.mean", false]], "measure() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.measure", false]], "measure_density() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.measure_density", false]], "measure_overlap() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.measure_overlap", false]], "mebf (class in pybmf.models.mebf)": [[3, "PyBMF.models.MEBF.MEBF", false]], "median() (in module pybmf.utils.data_utils)": [[6, "PyBMF.utils.data_utils.median", false]], "messagepassing (class in pybmf.models.messagepassing)": [[3, "PyBMF.models.MessagePassing.MessagePassing", false]], "module": [[0, "module-PyBMF", false], [1, "module-PyBMF.datasets", false], [1, "module-PyBMF.datasets.BaseData", false], [1, "module-PyBMF.datasets.BaseSplit", false], [1, "module-PyBMF.datasets.CrossValidation", false], [1, "module-PyBMF.datasets.MovieLensData", false], [1, "module-PyBMF.datasets.MovieLensGenreCastData", false], [1, "module-PyBMF.datasets.MovieLensGenreCastUserData", false], [1, "module-PyBMF.datasets.MovieLensUserData", false], [1, "module-PyBMF.datasets.NetflixData", false], [1, "module-PyBMF.datasets.NetflixGenreCastData", false], [1, "module-PyBMF.datasets.NoSplit", false], [1, "module-PyBMF.datasets.RatioSplit", false], [2, "module-PyBMF.generators", false], [2, "module-PyBMF.generators.BaseGenerator", false], [2, "module-PyBMF.generators.BlockDiagonalMatrixGenerator", false], [2, "module-PyBMF.generators.BlockMatrixGenerator", false], [2, "module-PyBMF.generators.SyntheticMatrixGenerator", false], [3, "module-PyBMF.models", false], [3, "module-PyBMF.models.Asso", false], [3, "module-PyBMF.models.AssoIter", false], [3, "module-PyBMF.models.AssoOpt", false], [3, "module-PyBMF.models.BMFAlternate", false], [3, "module-PyBMF.models.BMFCollective", false], [3, "module-PyBMF.models.BMFInterleave", false], [3, "module-PyBMF.models.BMFTools", false], [3, "module-PyBMF.models.BaseCollectiveModel", false], [3, "module-PyBMF.models.BaseModel", false], [3, "module-PyBMF.models.BaseModelTools", false], [3, "module-PyBMF.models.BinaryMFPenalty", false], [3, "module-PyBMF.models.BinaryMFPenaltyExCollective", false], [3, "module-PyBMF.models.BinaryMFThreshold", false], [3, "module-PyBMF.models.BinaryMFThresholdExCollective", false], [3, "module-PyBMF.models.BinaryMFThresholdExColumnwise", false], [3, "module-PyBMF.models.BinaryMFThresholdExSigmoid", false], [3, "module-PyBMF.models.BinaryMFThresholdExSigmoidColumnwise", false], [3, "module-PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda", false], [3, "module-PyBMF.models.CMF", false], [3, "module-PyBMF.models.ContinuousCollectiveModel", false], [3, "module-PyBMF.models.ContinuousModel", false], [3, "module-PyBMF.models.ELBMF", false], [3, "module-PyBMF.models.ELBMFNumPy", false], [3, "module-PyBMF.models.ELBMFPyTorch", false], [3, "module-PyBMF.models.FastStep", false], [3, "module-PyBMF.models.GreConD", false], [3, "module-PyBMF.models.GreConDPlus", false], [3, "module-PyBMF.models.Hyper", false], [3, "module-PyBMF.models.HyperPlus", false], [3, "module-PyBMF.models.IP", false], [3, "module-PyBMF.models.MEBF", false], [3, "module-PyBMF.models.MaxSAT", false], [3, "module-PyBMF.models.MessagePassing", false], [3, "module-PyBMF.models.NMFSklearn", false], [3, "module-PyBMF.models.OrMachine", false], [3, "module-PyBMF.models.PNLPF", false], [3, "module-PyBMF.models.PRIMP", false], [3, "module-PyBMF.models.PRIMPPyTorch", false], [3, "module-PyBMF.models.Panda", false], [3, "module-PyBMF.models.RSNMF", false], [3, "module-PyBMF.models.TransposedModel", false], [3, "module-PyBMF.models.WNMF", false], [4, "module-PyBMF.models.bmf_mp_ravanba", false], [4, "module-PyBMF.models.bmf_mp_ravanba.matrix_completion", false], [4, "module-PyBMF.models.bmf_mp_ravanba.utilities", false], [5, "module-PyBMF.solvers", false], [5, "module-PyBMF.solvers.line_search", false], [6, "module-PyBMF.utils", false], [6, "module-PyBMF.utils.boolean_utils", false], [6, "module-PyBMF.utils.collective_display_utils", false], [6, "module-PyBMF.utils.collective_evaluate_utils", false], [6, "module-PyBMF.utils.collective_transform_utils", false], [6, "module-PyBMF.utils.collective_utils", false], [6, "module-PyBMF.utils.common", false], [6, "module-PyBMF.utils.data_utils", false], [6, "module-PyBMF.utils.dataframe_utils", false], [6, "module-PyBMF.utils.decorator_utils", false], [6, "module-PyBMF.utils.display", false], [6, "module-PyBMF.utils.evaluate_utils", false], [6, "module-PyBMF.utils.experiment_utils", false], [6, "module-PyBMF.utils.generator_utils", false], [6, "module-PyBMF.utils.metrics", false], [6, "module-PyBMF.utils.sparse_utils", false], [7, "module-PyBMF", false]], "movielensdata (class in pybmf.datasets.movielensdata)": [[1, "PyBMF.datasets.MovieLensData.MovieLensData", false]], "movielensgenrecastdata (class in pybmf.datasets.movielensgenrecastdata)": [[1, "PyBMF.datasets.MovieLensGenreCastData.MovieLensGenreCastData", false]], "movielensgenrecastuserdata (class in pybmf.datasets.movielensgenrecastuserdata)": [[1, "PyBMF.datasets.MovieLensGenreCastUserData.MovieLensGenreCastUserData", false]], "movielensuserdata (class in pybmf.datasets.movielensuserdata)": [[1, "PyBMF.datasets.MovieLensUserData.MovieLensUserData", false]], "multiply() (in module pybmf.utils.boolean_utils)": [[6, "PyBMF.utils.boolean_utils.multiply", false]], "negative_sample() (pybmf.datasets.basesplit.basesplit method)": [[1, "PyBMF.datasets.BaseSplit.BaseSplit.negative_sample", false]], "negative_sample() (pybmf.datasets.crossvalidation.crossvalidation method)": [[1, "PyBMF.datasets.CrossValidation.CrossValidation.negative_sample", false]], "negative_sample() (pybmf.datasets.nosplit.nosplit method)": [[1, "PyBMF.datasets.NoSplit.NoSplit.negative_sample", false]], "negative_sample() (pybmf.datasets.ratiosplit.ratiosplit method)": [[1, "PyBMF.datasets.RatioSplit.RatioSplit.negative_sample", false]], "netflixdata (class in pybmf.datasets.netflixdata)": [[1, "PyBMF.datasets.NetflixData.NetflixData", false]], "netflixgenrecastdata (class in pybmf.datasets.netflixgenrecastdata)": [[1, "PyBMF.datasets.NetflixGenreCastData.NetflixGenreCastData", false]], "newton_update() (pybmf.models.cmf.cmf method)": [[3, "PyBMF.models.CMF.CMF.newton_update", false]], "nmfsklearn (class in pybmf.models.nmfsklearn)": [[3, "PyBMF.models.NMFSklearn.NMFSklearn", false]], "normalize_uv() (pybmf.models.continuousmodel.continuousmodel method)": [[3, "PyBMF.models.ContinuousModel.ContinuousModel.normalize_UV", false]], "nosplit (class in pybmf.datasets.nosplit)": [[1, "PyBMF.datasets.NoSplit.NoSplit", false]], "ormachine (class in pybmf.models.ormachine)": [[3, "PyBMF.models.OrMachine.OrMachine", false]], "panda (class in pybmf.models.panda)": [[3, "PyBMF.models.Panda.Panda", false]], "pnlpf (class in pybmf.models.pnlpf)": [[3, "PyBMF.models.PNLPF.PNLPF", false]], "power() (in module pybmf.utils.boolean_utils)": [[6, "PyBMF.utils.boolean_utils.power", false]], "ppv() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.PPV", false]], "predict_x() (pybmf.models.basemodel.basemodel method)": [[3, "PyBMF.models.BaseModel.BaseModel.predict_X", false]], "predict_xs() (pybmf.models.basecollectivemodel.basecollectivemodel method)": [[3, "PyBMF.models.BaseCollectiveModel.BaseCollectiveModel.predict_Xs", false]], "predict_xs() (pybmf.models.cmf.cmf method)": [[3, "PyBMF.models.CMF.CMF.predict_Xs", false]], "primp (class in pybmf.models.primp)": [[3, "PyBMF.models.PRIMP.PRIMP", false]], "primp (class in pybmf.models.primppytorch)": [[3, "PyBMF.models.PRIMPPyTorch.PRIMP", false]], "primp() (in module pybmf.models.primp)": [[3, "PyBMF.models.PRIMP.primp", false]], "primp() (in module pybmf.models.primppytorch)": [[3, "PyBMF.models.PRIMPPyTorch.primp", false]], "print_loss() (pybmf.models.elbmfnumpy.elbmf method)": [[3, "PyBMF.models.ELBMFNumPy.ELBMF.print_loss", false]], "print_msg() (pybmf.models.basemodeltools.basemodeltools method)": [[3, "PyBMF.models.BaseModelTools.BaseModelTools.print_msg", false]], "prox() (in module pybmf.models.elbmf)": [[3, "PyBMF.models.ELBMF.prox", false]], "proxelbmf() (in module pybmf.models.elbmfpytorch)": [[3, "PyBMF.models.ELBMFPyTorch.proxelbmf", false]], "proxelbmf() (in module pybmf.models.primp)": [[3, "PyBMF.models.PRIMP.proxelbmf", false]], "proxelbmf() (in module pybmf.models.primppytorch)": [[3, "PyBMF.models.PRIMPPyTorch.proxelbmf", false]], "proxelbmfbox() (in module pybmf.models.elbmfpytorch)": [[3, "PyBMF.models.ELBMFPyTorch.proxelbmfbox", false]], "proxelbmfbox() (in module pybmf.models.primp)": [[3, "PyBMF.models.PRIMP.proxelbmfbox", false]], "proxelbmfbox() (in module pybmf.models.primppytorch)": [[3, "PyBMF.models.PRIMPPyTorch.proxelbmfbox", false]], "proxelbmfnn() (in module pybmf.models.elbmfpytorch)": [[3, "PyBMF.models.ELBMFPyTorch.proxelbmfnn", false]], "proxelbmfnn() (in module pybmf.models.primp)": [[3, "PyBMF.models.PRIMP.proxelbmfnn", false]], "proxelbmfnn() (in module pybmf.models.primppytorch)": [[3, "PyBMF.models.PRIMPPyTorch.proxelbmfnn", false]], "pybmf": [[0, "module-PyBMF", false], [7, "module-PyBMF", false]], "pybmf.datasets": [[1, "module-PyBMF.datasets", false]], "pybmf.datasets.basedata": [[1, "module-PyBMF.datasets.BaseData", false]], "pybmf.datasets.basesplit": [[1, "module-PyBMF.datasets.BaseSplit", false]], "pybmf.datasets.crossvalidation": [[1, "module-PyBMF.datasets.CrossValidation", false]], "pybmf.datasets.movielensdata": [[1, "module-PyBMF.datasets.MovieLensData", false]], "pybmf.datasets.movielensgenrecastdata": [[1, "module-PyBMF.datasets.MovieLensGenreCastData", false]], "pybmf.datasets.movielensgenrecastuserdata": [[1, "module-PyBMF.datasets.MovieLensGenreCastUserData", false]], "pybmf.datasets.movielensuserdata": [[1, "module-PyBMF.datasets.MovieLensUserData", false]], "pybmf.datasets.netflixdata": [[1, "module-PyBMF.datasets.NetflixData", false]], "pybmf.datasets.netflixgenrecastdata": [[1, "module-PyBMF.datasets.NetflixGenreCastData", false]], "pybmf.datasets.nosplit": [[1, "module-PyBMF.datasets.NoSplit", false]], "pybmf.datasets.ratiosplit": [[1, "module-PyBMF.datasets.RatioSplit", false]], "pybmf.generators": [[2, "module-PyBMF.generators", false]], "pybmf.generators.basegenerator": [[2, "module-PyBMF.generators.BaseGenerator", false]], "pybmf.generators.blockdiagonalmatrixgenerator": [[2, "module-PyBMF.generators.BlockDiagonalMatrixGenerator", false]], "pybmf.generators.blockmatrixgenerator": [[2, "module-PyBMF.generators.BlockMatrixGenerator", false]], "pybmf.generators.syntheticmatrixgenerator": [[2, "module-PyBMF.generators.SyntheticMatrixGenerator", false]], "pybmf.models": [[3, "module-PyBMF.models", false]], "pybmf.models.asso": [[3, "module-PyBMF.models.Asso", false]], "pybmf.models.assoiter": [[3, "module-PyBMF.models.AssoIter", false]], "pybmf.models.assoopt": [[3, "module-PyBMF.models.AssoOpt", false]], "pybmf.models.basecollectivemodel": [[3, "module-PyBMF.models.BaseCollectiveModel", false]], "pybmf.models.basemodel": [[3, "module-PyBMF.models.BaseModel", false]], "pybmf.models.basemodeltools": [[3, "module-PyBMF.models.BaseModelTools", false]], "pybmf.models.binarymfpenalty": [[3, "module-PyBMF.models.BinaryMFPenalty", false]], "pybmf.models.binarymfpenaltyexcollective": [[3, "module-PyBMF.models.BinaryMFPenaltyExCollective", false]], "pybmf.models.binarymfthreshold": [[3, "module-PyBMF.models.BinaryMFThreshold", false]], "pybmf.models.binarymfthresholdexcollective": [[3, "module-PyBMF.models.BinaryMFThresholdExCollective", false]], "pybmf.models.binarymfthresholdexcolumnwise": [[3, "module-PyBMF.models.BinaryMFThresholdExColumnwise", false]], "pybmf.models.binarymfthresholdexsigmoid": [[3, "module-PyBMF.models.BinaryMFThresholdExSigmoid", false]], "pybmf.models.binarymfthresholdexsigmoidcolumnwise": [[3, "module-PyBMF.models.BinaryMFThresholdExSigmoidColumnwise", false]], "pybmf.models.binarymfthresholdexsigmoidcolumnwiselamda": [[3, "module-PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda", false]], "pybmf.models.bmf_mp_ravanba": [[4, "module-PyBMF.models.bmf_mp_ravanba", false]], "pybmf.models.bmf_mp_ravanba.matrix_completion": [[4, "module-PyBMF.models.bmf_mp_ravanba.matrix_completion", false]], "pybmf.models.bmf_mp_ravanba.utilities": [[4, "module-PyBMF.models.bmf_mp_ravanba.utilities", false]], "pybmf.models.bmfalternate": [[3, "module-PyBMF.models.BMFAlternate", false]], "pybmf.models.bmfcollective": [[3, "module-PyBMF.models.BMFCollective", false]], "pybmf.models.bmfinterleave": [[3, "module-PyBMF.models.BMFInterleave", false]], "pybmf.models.bmftools": [[3, "module-PyBMF.models.BMFTools", false]], "pybmf.models.cmf": [[3, "module-PyBMF.models.CMF", false]], "pybmf.models.continuouscollectivemodel": [[3, "module-PyBMF.models.ContinuousCollectiveModel", false]], "pybmf.models.continuousmodel": [[3, "module-PyBMF.models.ContinuousModel", false]], "pybmf.models.elbmf": [[3, "module-PyBMF.models.ELBMF", false]], "pybmf.models.elbmfnumpy": [[3, "module-PyBMF.models.ELBMFNumPy", false]], "pybmf.models.elbmfpytorch": [[3, "module-PyBMF.models.ELBMFPyTorch", false]], "pybmf.models.faststep": [[3, "module-PyBMF.models.FastStep", false]], "pybmf.models.grecond": [[3, "module-PyBMF.models.GreConD", false]], "pybmf.models.grecondplus": [[3, "module-PyBMF.models.GreConDPlus", false]], "pybmf.models.hyper": [[3, "module-PyBMF.models.Hyper", false]], "pybmf.models.hyperplus": [[3, "module-PyBMF.models.HyperPlus", false]], "pybmf.models.ip": [[3, "module-PyBMF.models.IP", false]], "pybmf.models.maxsat": [[3, "module-PyBMF.models.MaxSAT", false]], "pybmf.models.mebf": [[3, "module-PyBMF.models.MEBF", false]], "pybmf.models.messagepassing": [[3, "module-PyBMF.models.MessagePassing", false]], "pybmf.models.nmfsklearn": [[3, "module-PyBMF.models.NMFSklearn", false]], "pybmf.models.ormachine": [[3, "module-PyBMF.models.OrMachine", false]], "pybmf.models.panda": [[3, "module-PyBMF.models.Panda", false]], "pybmf.models.pnlpf": [[3, "module-PyBMF.models.PNLPF", false]], "pybmf.models.primp": [[3, "module-PyBMF.models.PRIMP", false]], "pybmf.models.primppytorch": [[3, "module-PyBMF.models.PRIMPPyTorch", false]], "pybmf.models.rsnmf": [[3, "module-PyBMF.models.RSNMF", false]], "pybmf.models.transposedmodel": [[3, "module-PyBMF.models.TransposedModel", false]], "pybmf.models.wnmf": [[3, "module-PyBMF.models.WNMF", false]], "pybmf.solvers": [[5, "module-PyBMF.solvers", false]], "pybmf.solvers.line_search": [[5, "module-PyBMF.solvers.line_search", false]], "pybmf.utils": [[6, "module-PyBMF.utils", false]], "pybmf.utils.boolean_utils": [[6, "module-PyBMF.utils.boolean_utils", false]], "pybmf.utils.collective_display_utils": [[6, "module-PyBMF.utils.collective_display_utils", false]], "pybmf.utils.collective_evaluate_utils": [[6, "module-PyBMF.utils.collective_evaluate_utils", false]], "pybmf.utils.collective_transform_utils": [[6, "module-PyBMF.utils.collective_transform_utils", false]], "pybmf.utils.collective_utils": [[6, "module-PyBMF.utils.collective_utils", false]], "pybmf.utils.common": [[6, "module-PyBMF.utils.common", false]], "pybmf.utils.data_utils": [[6, "module-PyBMF.utils.data_utils", false]], "pybmf.utils.dataframe_utils": [[6, "module-PyBMF.utils.dataframe_utils", false]], "pybmf.utils.decorator_utils": [[6, "module-PyBMF.utils.decorator_utils", false]], "pybmf.utils.display": [[6, "module-PyBMF.utils.display", false]], "pybmf.utils.evaluate_utils": [[6, "module-PyBMF.utils.evaluate_utils", false]], "pybmf.utils.experiment_utils": [[6, "module-PyBMF.utils.experiment_utils", false]], "pybmf.utils.generator_utils": [[6, "module-PyBMF.utils.generator_utils", false]], "pybmf.utils.metrics": [[6, "module-PyBMF.utils.metrics", false]], "pybmf.utils.sparse_utils": [[6, "module-PyBMF.utils.sparse_utils", false]], "ratiosplit (class in pybmf.datasets.ratiosplit)": [[1, "PyBMF.datasets.RatioSplit.RatioSplit", false]], "read_csv() (in module pybmf.models.bmf_mp_ravanba.utilities)": [[4, "PyBMF.models.bmf_mp_ravanba.utilities.read_csv", false]], "read_data() (pybmf.datasets.basedata.basedata method)": [[1, "PyBMF.datasets.BaseData.BaseData.read_data", false]], "read_data() (pybmf.datasets.movielensdata.movielensdata method)": [[1, "PyBMF.datasets.MovieLensData.MovieLensData.read_data", false]], "read_data() (pybmf.datasets.movielensgenrecastdata.movielensgenrecastdata method)": [[1, "PyBMF.datasets.MovieLensGenreCastData.MovieLensGenreCastData.read_data", false]], "read_data() (pybmf.datasets.movielensgenrecastuserdata.movielensgenrecastuserdata method)": [[1, "PyBMF.datasets.MovieLensGenreCastUserData.MovieLensGenreCastUserData.read_data", false]], "read_data() (pybmf.datasets.movielensuserdata.movielensuserdata method)": [[1, "PyBMF.datasets.MovieLensUserData.MovieLensUserData.read_data", false]], "read_data() (pybmf.datasets.netflixdata.netflixdata method)": [[1, "PyBMF.datasets.NetflixData.NetflixData.read_data", false]], "read_data() (pybmf.datasets.netflixgenrecastdata.netflixgenrecastdata method)": [[1, "PyBMF.datasets.NetflixGenreCastData.NetflixGenreCastData.read_data", false]], "read_pickle() (pybmf.datasets.basedata.basedata method)": [[1, "PyBMF.datasets.BaseData.BaseData.read_pickle", false]], "rec_error() (in module pybmf.models.binarymfpenalty)": [[3, "PyBMF.models.BinaryMFPenalty.rec_error", false]], "rec_error() (in module pybmf.models.bmf_mp_ravanba.utilities)": [[4, "PyBMF.models.bmf_mp_ravanba.utilities.rec_error", false]], "record() (in module pybmf.utils.evaluate_utils)": [[6, "PyBMF.utils.evaluate_utils.record", false]], "refine_overlapping() (pybmf.models.bmfinterleave.bmfinterleave method)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave.refine_overlapping", false]], "reg_error() (in module pybmf.models.binarymfpenalty)": [[3, "PyBMF.models.BinaryMFPenalty.reg_error", false]], "reinit_basis() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.reinit_basis", false]], "remove() (pybmf.models.bmftools.w_schedulers method)": [[3, "PyBMF.models.BMFTools.w_schedulers.remove", false]], "remove_covered() (pybmf.models.grecondplus.grecondplus method)": [[3, "PyBMF.models.GreConDPlus.GreConDPlus.remove_covered", false]], "remove_overlapped() (pybmf.models.grecondplus.grecondplus method)": [[3, "PyBMF.models.GreConDPlus.GreConDPlus.remove_overlapped", false]], "reset() (pybmf.models.bmftools.w_scheduler method)": [[3, "PyBMF.models.BMFTools.w_scheduler.reset", false]], "reset() (pybmf.models.bmftools.w_schedulers method)": [[3, "PyBMF.models.BMFTools.w_schedulers.reset", false]], "reverse_index() (in module pybmf.utils.generator_utils)": [[6, "PyBMF.utils.generator_utils.reverse_index", false]], "rmse() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.RMSE", false]], "rsnmf (class in pybmf.models.rsnmf)": [[3, "PyBMF.models.RSNMF.RSNMF", false]], "run() (pybmf.models.bmf_mp_ravanba.matrix_completion.matrixcompletion method)": [[4, "PyBMF.models.bmf_mp_ravanba.matrix_completion.MatrixCompletion.run", false]], "safe_indexing() (in module pybmf.utils.common)": [[6, "PyBMF.utils.common.safe_indexing", false]], "sample() (in module pybmf.utils.data_utils)": [[6, "PyBMF.utils.data_utils.sample", false]], "sample() (pybmf.datasets.basedata.basedata method)": [[1, "PyBMF.datasets.BaseData.BaseData.sample", false]], "set_config() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.set_config", false]], "set_config() (pybmf.models.basemodeltools.basemodeltools method)": [[3, "PyBMF.models.BaseModelTools.BaseModelTools.set_config", false]], "set_extensions() (pybmf.models.grecondplus.grecondplus method)": [[3, "PyBMF.models.GreConDPlus.GreConDPlus.set_extensions", false]], "set_factor_info() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.set_factor_info", false]], "set_factors() (pybmf.models.basemodeltools.basemodeltools method)": [[3, "PyBMF.models.BaseModelTools.BaseModelTools.set_factors", false]], "set_init_order() (pybmf.models.bmfcollective.bmfcollective method)": [[3, "PyBMF.models.BMFCollective.BMFCollective.set_init_order", false]], "set_optimal_row() (pybmf.models.assoopt.assoopt method)": [[3, "PyBMF.models.AssoOpt.AssoOpt.set_optimal_row", false]], "set_params() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.set_params", false]], "set_params() (pybmf.models.basemodeltools.basemodeltools method)": [[3, "PyBMF.models.BaseModelTools.BaseModelTools.set_params", false]], "set_update_order() (pybmf.models.bmfcollective.bmfcollective method)": [[3, "PyBMF.models.BMFCollective.BMFCollective.set_update_order", false]], "show_factor_distribution() (in module pybmf.utils.display)": [[6, "PyBMF.utils.display.show_factor_distribution", false]], "show_matrix() (in module pybmf.utils.display)": [[6, "PyBMF.utils.display.show_matrix", false]], "show_matrix() (pybmf.datasets.basedata.basedata method)": [[1, "PyBMF.datasets.BaseData.BaseData.show_matrix", false]], "show_matrix() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.show_matrix", false]], "show_matrix() (pybmf.models.basecollectivemodel.basecollectivemodel method)": [[3, "PyBMF.models.BaseCollectiveModel.BaseCollectiveModel.show_matrix", false]], "show_matrix() (pybmf.models.basemodel.basemodel method)": [[3, "PyBMF.models.BaseModel.BaseModel.show_matrix", false]], "show_matrix() (pybmf.models.continuousmodel.continuousmodel method)": [[3, "PyBMF.models.ContinuousModel.ContinuousModel.show_matrix", false]], "shuffle() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.shuffle", false]], "shuffle_by_dim() (in module pybmf.utils.generator_utils)": [[6, "PyBMF.utils.generator_utils.shuffle_by_dim", false]], "shuffle_factors() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.shuffle_factors", false]], "shuffle_matrix() (in module pybmf.utils.generator_utils)": [[6, "PyBMF.utils.generator_utils.shuffle_matrix", false]], "sort_by_cost() (pybmf.models.hyper.hyper method)": [[3, "PyBMF.models.Hyper.Hyper.sort_by_cost", false]], "sort_factor() (pybmf.datasets.movielensdata.movielensdata method)": [[1, "PyBMF.datasets.MovieLensData.MovieLensData.sort_factor", false]], "sort_items() (pybmf.models.panda.panda method)": [[3, "PyBMF.models.Panda.Panda.sort_items", false]], "sort_matrices() (in module pybmf.utils.collective_display_utils)": [[6, "PyBMF.utils.collective_display_utils.sort_matrices", false]], "sort_order() (in module pybmf.utils.data_utils)": [[6, "PyBMF.utils.data_utils.sort_order", false]], "sorted_index() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.sorted_index", false]], "sortout() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.sortout", false]], "sparse_indexing() (in module pybmf.utils.sparse_utils)": [[6, "PyBMF.utils.sparse_utils.sparse_indexing", false]], "split_factor_list() (in module pybmf.utils.collective_utils)": [[6, "PyBMF.utils.collective_utils.split_factor_list", false]], "split_u_into_us() (in module pybmf.utils.collective_transform_utils)": [[6, "PyBMF.utils.collective_transform_utils.split_U_into_Us", false]], "split_x_into_xs() (in module pybmf.utils.collective_transform_utils)": [[6, "PyBMF.utils.collective_transform_utils.split_X_into_Xs", false]], "step() (pybmf.models.bmftools.w_scheduler method)": [[3, "PyBMF.models.BMFTools.w_scheduler.step", false]], "step() (pybmf.models.bmftools.w_schedulers method)": [[3, "PyBMF.models.BMFTools.w_schedulers.step", false]], "subtract() (in module pybmf.utils.boolean_utils)": [[6, "PyBMF.utils.boolean_utils.subtract", false]], "sum() (in module pybmf.utils.data_utils)": [[6, "PyBMF.utils.data_utils.sum", false]], "summarize() (in module pybmf.utils.data_utils)": [[6, "PyBMF.utils.data_utils.summarize", false]], "syntheticmatrixgenerator (class in pybmf.generators)": [[2, "PyBMF.generators.SyntheticMatrixGenerator", false]], "syntheticmatrixgenerator (class in pybmf.generators.syntheticmatrixgenerator)": [[2, "PyBMF.generators.SyntheticMatrixGenerator.SyntheticMatrixGenerator", false]], "timeit() (in module pybmf.utils.decorator_utils)": [[6, "PyBMF.utils.decorator_utils.timeit", false]], "tn() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.TN", false]], "tnr() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.TNR", false]], "to_dense() (in module pybmf.utils.sparse_utils)": [[6, "PyBMF.utils.sparse_utils.to_dense", false]], "to_dense() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.to_dense", false]], "to_interval() (in module pybmf.utils.common)": [[6, "PyBMF.utils.common.to_interval", false]], "to_single() (pybmf.datasets.basedata.basedata method)": [[1, "PyBMF.datasets.BaseData.BaseData.to_single", false]], "to_sparse() (in module pybmf.utils.sparse_utils)": [[6, "PyBMF.utils.sparse_utils.to_sparse", false]], "to_sparse() (pybmf.generators.basegenerator.basegenerator method)": [[2, "PyBMF.generators.BaseGenerator.BaseGenerator.to_sparse", false]], "to_triplet() (in module pybmf.utils.sparse_utils)": [[6, "PyBMF.utils.sparse_utils.to_triplet", false]], "tp() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.TP", false]], "tpr() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.TPR", false]], "transposedmodel (class in pybmf.models.transposedmodel)": [[3, "PyBMF.models.TransposedModel.TransposedModel", false]], "truncate_factors() (pybmf.models.basemodeltools.basemodeltools method)": [[3, "PyBMF.models.BaseModelTools.BaseModelTools.truncate_factors", false]], "update() (pybmf.models.wnmf.wnmf method)": [[3, "PyBMF.models.WNMF.WNMF.update", false]], "update_adj_list() (pybmf.models.bmf_mp_ravanba.matrix_completion.matrixcompletion method)": [[4, "PyBMF.models.bmf_mp_ravanba.matrix_completion.MatrixCompletion.update_adj_list", false]], "update_basis() (pybmf.models.bmfalternate.bmfalternate method)": [[3, "PyBMF.models.BMFAlternate.BMFAlternate.update_basis", false]], "update_basis() (pybmf.models.bmfcollective.bmfcollective method)": [[3, "PyBMF.models.BMFCollective.BMFCollective.update_basis", false]], "update_basis() (pybmf.models.bmfinterleave.bmfinterleave method)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave.update_basis", false]], "update_basis_dim() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.update_basis_dim", false]], "update_cover() (pybmf.models.bmfcollective.bmfcollective method)": [[3, "PyBMF.models.BMFCollective.BMFCollective.update_cover", false]], "update_cover() (pybmf.models.bmftools.bmftools method)": [[3, "PyBMF.models.BMFTools.BMFTools.update_cover", false]], "update_margs() (pybmf.models.bmf_mp_ravanba.matrix_completion.matrixcompletion method)": [[4, "PyBMF.models.bmf_mp_ravanba.matrix_completion.MatrixCompletion.update_margs", false]], "update_min_sum() (pybmf.models.bmf_mp_ravanba.matrix_completion.matrixcompletion method)": [[4, "PyBMF.models.bmf_mp_ravanba.matrix_completion.MatrixCompletion.update_min_sum", false]], "update_u() (in module pybmf.models.binarymfpenalty)": [[3, "PyBMF.models.BinaryMFPenalty.update_U", false]], "update_u() (in module pybmf.models.elbmf)": [[3, "PyBMF.models.ELBMF.update_U", false]], "update_u() (in module pybmf.models.pnlpf)": [[3, "PyBMF.models.PNLPF.update_U", false]], "update_u() (pybmf.models.binarymfpenalty.binarymfpenalty method)": [[3, "PyBMF.models.BinaryMFPenalty.BinaryMFPenalty.update_U", false]], "update_u() (pybmf.models.pnlpf.pnlpf method)": [[3, "PyBMF.models.PNLPF.PNLPF.update_U", false]], "update_v() (in module pybmf.models.binarymfpenalty)": [[3, "PyBMF.models.BinaryMFPenalty.update_V", false]], "update_v() (in module pybmf.models.pnlpf)": [[3, "PyBMF.models.PNLPF.update_V", false]], "update_v() (pybmf.models.binarymfpenalty.binarymfpenalty method)": [[3, "PyBMF.models.BinaryMFPenalty.BinaryMFPenalty.update_V", false]], "update_v() (pybmf.models.pnlpf.pnlpf method)": [[3, "PyBMF.models.PNLPF.PNLPF.update_V", false]], "update_weights() (pybmf.models.bmfinterleave.bmfinterleave method)": [[3, "PyBMF.models.BMFInterleave.BMFInterleave.update_weights", false]], "w_scheduler (class in pybmf.models.bmftools)": [[3, "PyBMF.models.BMFTools.w_scheduler", false]], "w_schedulers (class in pybmf.models.bmftools)": [[3, "PyBMF.models.BMFTools.w_schedulers", false]], "weak_signal_detection() (pybmf.models.mebf.mebf method)": [[3, "PyBMF.models.MEBF.MEBF.weak_signal_detection", false]], "weighted_error() (in module pybmf.utils.metrics)": [[6, "PyBMF.utils.metrics.weighted_error", false]], "weighted_score() (in module pybmf.utils.collective_evaluate_utils)": [[6, "PyBMF.utils.collective_evaluate_utils.weighted_score", false]], "wnmf (class in pybmf.models.wnmf)": [[3, "PyBMF.models.WNMF.WNMF", false]]}, "objects": {"": [[7, 0, 0, "-", "PyBMF"]], "PyBMF": [[1, 0, 0, "-", "datasets"], [2, 0, 0, "-", "generators"], [3, 0, 0, "-", "models"], [5, 0, 0, "-", "solvers"], [6, 0, 0, "-", "utils"]], "PyBMF.datasets": [[1, 0, 0, "-", "BaseData"], [1, 0, 0, "-", "BaseSplit"], [1, 0, 0, "-", "CrossValidation"], [1, 0, 0, "-", "MovieLensData"], [1, 0, 0, "-", "MovieLensGenreCastData"], [1, 0, 0, "-", "MovieLensGenreCastUserData"], [1, 0, 0, "-", "MovieLensUserData"], [1, 0, 0, "-", "NetflixData"], [1, 0, 0, "-", "NetflixGenreCastData"], [1, 0, 0, "-", "NoSplit"], [1, 0, 0, "-", "RatioSplit"]], "PyBMF.datasets.BaseData": [[1, 1, 1, "", "BaseData"]], "PyBMF.datasets.BaseData.BaseData": [[1, 2, 1, "", "dump_pickle"], [1, 3, 1, "", "has_pickle"], [1, 2, 1, "", "load"], [1, 2, 1, "", "load_data"], [1, 2, 1, "", "read_data"], [1, 2, 1, "", "read_pickle"], [1, 2, 1, "", "sample"], [1, 2, 1, "", "show_matrix"], [1, 2, 1, "", "to_single"]], "PyBMF.datasets.BaseSplit": [[1, 1, 1, "", "BaseSplit"]], "PyBMF.datasets.BaseSplit.BaseSplit": [[1, 2, 1, "", "check_params"], [1, 2, 1, "", "get_neg_indices"], [1, 2, 1, "", "load_neg_data"], [1, 2, 1, "", "load_pos_data"], [1, 2, 1, "", "negative_sample"]], "PyBMF.datasets.CrossValidation": [[1, 1, 1, "", "CrossValidation"]], "PyBMF.datasets.CrossValidation.CrossValidation": [[1, 2, 1, "", "get_fold"], [1, 2, 1, "", "get_indices"], [1, 2, 1, "", "get_partition"], [1, 2, 1, "", "negative_sample"]], "PyBMF.datasets.MovieLensData": [[1, 1, 1, "", "MovieLensData"]], "PyBMF.datasets.MovieLensData.MovieLensData": [[1, 2, 1, "", "load_data"], [1, 2, 1, "", "read_data"], [1, 2, 1, "", "sort_factor"]], "PyBMF.datasets.MovieLensGenreCastData": [[1, 1, 1, "", "MovieLensGenreCastData"]], "PyBMF.datasets.MovieLensGenreCastData.MovieLensGenreCastData": [[1, 2, 1, "", "get_attribute_info"], [1, 2, 1, "", "load_data"], [1, 2, 1, "", "read_data"]], "PyBMF.datasets.MovieLensGenreCastUserData": [[1, 1, 1, "", "MovieLensGenreCastUserData"]], "PyBMF.datasets.MovieLensGenreCastUserData.MovieLensGenreCastUserData": [[1, 2, 1, "", "load_data"], [1, 2, 1, "", "read_data"]], "PyBMF.datasets.MovieLensUserData": [[1, 1, 1, "", "MovieLensUserData"]], "PyBMF.datasets.MovieLensUserData.MovieLensUserData": [[1, 2, 1, "", "get_user_profile"], [1, 2, 1, "", "load_data"], [1, 2, 1, "", "read_data"]], "PyBMF.datasets.NetflixData": [[1, 1, 1, "", "NetflixData"]], "PyBMF.datasets.NetflixData.NetflixData": [[1, 2, 1, "", "load_data"], [1, 2, 1, "", "read_data"]], "PyBMF.datasets.NetflixGenreCastData": [[1, 1, 1, "", "NetflixGenreCastData"]], "PyBMF.datasets.NetflixGenreCastData.NetflixGenreCastData": [[1, 2, 1, "", "get_attribute_info"], [1, 2, 1, "", "load_data"], [1, 2, 1, "", "read_data"]], "PyBMF.datasets.NoSplit": [[1, 1, 1, "", "NoSplit"]], "PyBMF.datasets.NoSplit.NoSplit": [[1, 2, 1, "", "negative_sample"]], "PyBMF.datasets.RatioSplit": [[1, 1, 1, "", "RatioSplit"]], "PyBMF.datasets.RatioSplit.RatioSplit": [[1, 2, 1, "", "get_indices"], [1, 2, 1, "", "get_size"], [1, 2, 1, "", "negative_sample"]], "PyBMF.generators": [[2, 0, 0, "-", "BaseGenerator"], [2, 1, 1, "", "BlockDiagonalMatrixGenerator"], [2, 0, 0, "-", "BlockDiagonalMatrixGenerator"], [2, 1, 1, "", "BlockMatrixGenerator"], [2, 0, 0, "-", "BlockMatrixGenerator"], [2, 1, 1, "", "SyntheticMatrixGenerator"], [2, 0, 0, "-", "SyntheticMatrixGenerator"]], "PyBMF.generators.BaseGenerator": [[2, 1, 1, "", "BaseGenerator"]], "PyBMF.generators.BaseGenerator.BaseGenerator": [[2, 2, 1, "", "add_noise"], [2, 2, 1, "", "boolean_matmul"], [2, 2, 1, "", "check_params"], [2, 2, 1, "", "generate"], [2, 2, 1, "", "generate_factor"], [2, 2, 1, "", "generate_factors"], [2, 2, 1, "", "measure"], [2, 2, 1, "", "measure_density"], [2, 2, 1, "", "measure_overlap"], [2, 2, 1, "", "set_config"], [2, 2, 1, "", "set_factor_info"], [2, 2, 1, "", "set_params"], [2, 2, 1, "", "show_matrix"], [2, 2, 1, "", "shuffle"], [2, 2, 1, "", "shuffle_factors"], [2, 2, 1, "", "sorted_index"], [2, 2, 1, "", "sortout"], [2, 2, 1, "", "to_dense"], [2, 2, 1, "", "to_sparse"]], "PyBMF.generators.BlockDiagonalMatrixGenerator": [[2, 1, 1, "", "BlockDiagonalMatrixGenerator"], [2, 2, 1, "", "generate"], [2, 2, 1, "", "generate_factor"], [2, 2, 1, "", "generate_factors"]], "PyBMF.generators.BlockDiagonalMatrixGenerator.BlockDiagonalMatrixGenerator": [[2, 2, 1, "", "generate"], [2, 2, 1, "", "generate_factor"], [2, 2, 1, "", "generate_factors"]], "PyBMF.generators.BlockMatrixGenerator": [[2, 1, 1, "", "BlockMatrixGenerator"], [2, 2, 1, "", "check_overlap"], [2, 2, 1, "", "generate"], [2, 2, 1, "", "generate_factor"], [2, 2, 1, "", "generate_factor_points"], [2, 2, 1, "", "generate_factors"], [2, 2, 1, "", "is_overlapped"]], "PyBMF.generators.BlockMatrixGenerator.BlockMatrixGenerator": [[2, 2, 1, "", "check_overlap"], [2, 2, 1, "", "generate"], [2, 2, 1, "", "generate_factor"], [2, 2, 1, "", "generate_factor_points"], [2, 2, 1, "", "generate_factors"], [2, 2, 1, "", "is_overlapped"]], "PyBMF.generators.SyntheticMatrixGenerator": [[2, 1, 1, "", "SyntheticMatrixGenerator"], [2, 2, 1, "", "generate"], [2, 2, 1, "", "generate_factor"], [2, 2, 1, "", "generate_factors"]], "PyBMF.generators.SyntheticMatrixGenerator.SyntheticMatrixGenerator": [[2, 2, 1, "", "generate"], [2, 2, 1, "", "generate_factor"], [2, 2, 1, "", "generate_factors"]], "PyBMF.models": [[3, 0, 0, "-", "Asso"], [3, 0, 0, "-", "AssoIter"], [3, 0, 0, "-", "AssoOpt"], [3, 0, 0, "-", "BMFAlternate"], [3, 0, 0, "-", "BMFCollective"], [3, 0, 0, "-", "BMFInterleave"], [3, 0, 0, "-", "BMFTools"], [3, 0, 0, "-", "BaseCollectiveModel"], [3, 0, 0, "-", "BaseModel"], [3, 0, 0, "-", "BaseModelTools"], [3, 0, 0, "-", "BinaryMFPenalty"], [3, 0, 0, "-", "BinaryMFPenaltyExCollective"], [3, 0, 0, "-", "BinaryMFThreshold"], [3, 0, 0, "-", "BinaryMFThresholdExCollective"], [3, 0, 0, "-", "BinaryMFThresholdExColumnwise"], [3, 0, 0, "-", "BinaryMFThresholdExSigmoid"], [3, 0, 0, "-", "BinaryMFThresholdExSigmoidColumnwise"], [3, 0, 0, "-", "BinaryMFThresholdExSigmoidColumnwiseLamda"], [3, 0, 0, "-", "CMF"], [3, 0, 0, "-", "ContinuousCollectiveModel"], [3, 0, 0, "-", "ContinuousModel"], [3, 0, 0, "-", "ELBMF"], [3, 0, 0, "-", "ELBMFNumPy"], [3, 0, 0, "-", "ELBMFPyTorch"], [3, 0, 0, "-", "FastStep"], [3, 0, 0, "-", "GreConD"], [3, 0, 0, "-", "GreConDPlus"], [3, 0, 0, "-", "Hyper"], [3, 0, 0, "-", "HyperPlus"], [3, 0, 0, "-", "IP"], [3, 0, 0, "-", "MEBF"], [3, 0, 0, "-", "MaxSAT"], [3, 0, 0, "-", "MessagePassing"], [3, 0, 0, "-", "NMFSklearn"], [3, 0, 0, "-", "OrMachine"], [3, 0, 0, "-", "PNLPF"], [3, 0, 0, "-", "PRIMP"], [3, 0, 0, "-", "PRIMPPyTorch"], [3, 0, 0, "-", "Panda"], [3, 0, 0, "-", "RSNMF"], [3, 0, 0, "-", "TransposedModel"], [3, 0, 0, "-", "WNMF"], [4, 0, 0, "-", "bmf_mp_ravanba"]], "PyBMF.models.Asso": [[3, 1, 1, "", "Asso"], [3, 4, 1, "", "build_assoc"], [3, 4, 1, "", "build_basis"], [3, 4, 1, "", "get_vector"]], "PyBMF.models.Asso.Asso": [[3, 2, 1, "", "fit"], [3, 2, 1, "", "init_model"]], "PyBMF.models.AssoIter": [[3, 1, 1, "", "AssoIter"]], "PyBMF.models.AssoIter.AssoIter": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_refined_column"], [3, 2, 1, "", "init_model"]], "PyBMF.models.AssoOpt": [[3, 1, 1, "", "AssoOpt"], [3, 4, 1, "", "int2bin"]], "PyBMF.models.AssoOpt.AssoOpt": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "init_model"], [3, 2, 1, "", "set_optimal_row"]], "PyBMF.models.BMFAlternate": [[3, 1, 1, "", "BMFAlternate"]], "PyBMF.models.BMFAlternate.BMFAlternate": [[3, 2, 1, "", "check_merge"], [3, 2, 1, "", "check_overlap"], [3, 2, 1, "", "check_params"], [3, 2, 1, "", "exclusive_cost"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_overlaps"], [3, 2, 1, "", "init_model"], [3, 2, 1, "", "update_basis"]], "PyBMF.models.BMFCollective": [[3, 1, 1, "", "BMFCollective"]], "PyBMF.models.BMFCollective.BMFCollective": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_vector"], [3, 2, 1, "", "init_basis"], [3, 2, 1, "", "set_init_order"], [3, 2, 1, "", "set_update_order"], [3, 2, 1, "", "update_basis"], [3, 2, 1, "", "update_cover"]], "PyBMF.models.BMFInterleave": [[3, 1, 1, "", "BMFInterleave"]], "PyBMF.models.BMFInterleave.BMFInterleave": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "exclusive_dl"], [3, 2, 1, "", "exclusive_score"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_overlappings"], [3, 2, 1, "", "get_vector"], [3, 2, 1, "", "init_model"], [3, 2, 1, "", "refine_overlapping"], [3, 2, 1, "", "update_basis"], [3, 2, 1, "", "update_weights"]], "PyBMF.models.BMFTools": [[3, 1, 1, "", "BMFTools"], [3, 1, 1, "", "w_scheduler"], [3, 1, 1, "", "w_schedulers"]], "PyBMF.models.BMFTools.BMFTools": [[3, 2, 1, "", "check_converge"], [3, 2, 1, "", "check_merge"], [3, 2, 1, "", "check_overlap"], [3, 2, 1, "", "check_remove"], [3, 2, 1, "", "get_X_pd_rest"], [3, 2, 1, "", "get_basis_dim"], [3, 2, 1, "", "init_basis"], [3, 2, 1, "", "init_basis_asso"], [3, 2, 1, "", "init_basis_random_bits"], [3, 2, 1, "", "init_basis_random_rows"], [3, 2, 1, "", "init_cover"], [3, 2, 1, "", "reinit_basis"], [3, 2, 1, "", "update_basis_dim"], [3, 2, 1, "", "update_cover"]], "PyBMF.models.BMFTools.w_scheduler": [[3, 2, 1, "", "reset"], [3, 2, 1, "", "step"]], "PyBMF.models.BMFTools.w_schedulers": [[3, 2, 1, "", "add"], [3, 2, 1, "", "remove"], [3, 2, 1, "", "reset"], [3, 2, 1, "", "step"]], "PyBMF.models.BaseCollectiveModel": [[3, 1, 1, "", "BaseCollectiveModel"]], "PyBMF.models.BaseCollectiveModel.BaseCollectiveModel": [[3, 2, 1, "", "evaluate"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "init_model"], [3, 2, 1, "", "load_dataset"], [3, 2, 1, "", "predict_Xs"], [3, 2, 1, "", "show_matrix"]], "PyBMF.models.BaseModel": [[3, 1, 1, "", "BaseModel"]], "PyBMF.models.BaseModel.BaseModel": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "evaluate"], [3, 2, 1, "", "finish"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "init_model"], [3, 2, 1, "", "load_dataset"], [3, 2, 1, "", "predict_X"], [3, 2, 1, "", "show_matrix"]], "PyBMF.models.BaseModelTools": [[3, 1, 1, "", "BaseModelTools"]], "PyBMF.models.BaseModelTools.BaseModelTools": [[3, 2, 1, "", "early_stop"], [3, 2, 1, "", "extend_factors"], [3, 2, 1, "", "import_model"], [3, 2, 1, "", "print_msg"], [3, 2, 1, "", "set_config"], [3, 2, 1, "", "set_factors"], [3, 2, 1, "", "set_params"], [3, 2, 1, "", "truncate_factors"]], "PyBMF.models.BinaryMFPenalty": [[3, 1, 1, "", "BinaryMFPenalty"], [3, 4, 1, "", "error"], [3, 4, 1, "", "rec_error"], [3, 4, 1, "", "reg_error"], [3, 4, 1, "", "update_U"], [3, 4, 1, "", "update_V"]], "PyBMF.models.BinaryMFPenalty.BinaryMFPenalty": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_prediction"], [3, 2, 1, "", "init_model"], [3, 2, 1, "", "update_U"], [3, 2, 1, "", "update_V"]], "PyBMF.models.BinaryMFThreshold": [[3, 1, 1, "", "BinaryMFThreshold"]], "PyBMF.models.BinaryMFThreshold.BinaryMFThreshold": [[3, 2, 1, "", "F"], [3, 2, 1, "", "check_params"], [3, 2, 1, "", "dF"], [3, 2, 1, "", "dXdx"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "init_model"]], "PyBMF.models.BinaryMFThresholdExCollective": [[3, 1, 1, "", "BinaryMFThresholdExCollective"]], "PyBMF.models.BinaryMFThresholdExCollective.BinaryMFThresholdExCollective": [[3, 2, 1, "", "F"], [3, 2, 1, "", "approximate_Xs"], [3, 2, 1, "", "check_params"], [3, 2, 1, "", "dF"], [3, 2, 1, "", "dXdx"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "init_model"]], "PyBMF.models.BinaryMFThresholdExColumnwise": [[3, 1, 1, "", "BinaryMFThresholdExColumnwise"], [3, 4, 1, "", "get_prediction_with_sigmoid"]], "PyBMF.models.BinaryMFThresholdExColumnwise.BinaryMFThresholdExColumnwise": [[3, 2, 1, "", "F"], [3, 2, 1, "", "check_params"], [3, 2, 1, "", "d2F"], [3, 2, 1, "", "d2Xdx2"], [3, 2, 1, "", "dF"], [3, 2, 1, "", "fit"]], "PyBMF.models.BinaryMFThresholdExSigmoid": [[3, 1, 1, "", "BinaryMFThresholdExSigmoid"]], "PyBMF.models.BinaryMFThresholdExSigmoid.BinaryMFThresholdExSigmoid": [[3, 2, 1, "", "F"], [3, 2, 1, "", "check_params"], [3, 2, 1, "", "dF"]], "PyBMF.models.BinaryMFThresholdExSigmoidColumnwise": [[3, 1, 1, "", "BinaryMFThresholdExSigmoidColumnwise"]], "PyBMF.models.BinaryMFThresholdExSigmoidColumnwise.BinaryMFThresholdExSigmoidColumnwise": [[3, 2, 1, "", "F"], [3, 2, 1, "", "check_params"], [3, 2, 1, "", "dF"], [3, 2, 1, "", "fit"]], "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda": [[3, 1, 1, "", "BinaryMFThresholdExSigmoidColumnwiseLamda"]], "PyBMF.models.BinaryMFThresholdExSigmoidColumnwiseLamda.BinaryMFThresholdExSigmoidColumnwiseLamda": [[3, 2, 1, "", "F"], [3, 2, 1, "", "approximate_X"], [3, 2, 1, "", "check_params"], [3, 2, 1, "", "d2F"], [3, 2, 1, "", "d2Xdx2"], [3, 2, 1, "", "dF"], [3, 2, 1, "", "dXdlamda"], [3, 2, 1, "", "dXdx"], [3, 2, 1, "", "fit"]], "PyBMF.models.CMF": [[3, 1, 1, "", "CMF"]], "PyBMF.models.CMF.CMF": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "error"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "init_model"], [3, 2, 1, "", "newton_update"], [3, 2, 1, "", "predict_Xs"]], "PyBMF.models.ContinuousCollectiveModel": [[3, 1, 1, "", "ContinuousCollectiveModel"]], "PyBMF.models.ContinuousCollectiveModel.ContinuousCollectiveModel": [[3, 2, 1, "", "init_Us"], [3, 2, 1, "", "init_Ws"], [3, 2, 1, "", "init_model"]], "PyBMF.models.ContinuousModel": [[3, 1, 1, "", "ContinuousModel"]], "PyBMF.models.ContinuousModel.ContinuousModel": [[3, 2, 1, "", "init_UV"], [3, 2, 1, "", "init_W"], [3, 2, 1, "", "init_model"], [3, 2, 1, "", "normalize_UV"], [3, 2, 1, "", "show_matrix"]], "PyBMF.models.ELBMF": [[3, 1, 1, "", "ELBMF"], [3, 4, 1, "", "get_integrality_gap"], [3, 4, 1, "", "prox"], [3, 4, 1, "", "update_U"]], "PyBMF.models.ELBMF.ELBMF": [[3, 2, 1, "", "fit"], [3, 2, 1, "", "iPALM"], [3, 2, 1, "", "init_model"]], "PyBMF.models.ELBMFNumPy": [[3, 1, 1, "", "ELBMF"]], "PyBMF.models.ELBMFNumPy.ELBMF": [[3, 2, 1, "", "factorize"], [3, 2, 1, "", "init_factorization"], [3, 2, 1, "", "print_loss"]], "PyBMF.models.ELBMFPyTorch": [[3, 1, 1, "", "ELBMF"], [3, 4, 1, "", "elbmf"], [3, 4, 1, "", "elbmf_ipalm"], [3, 4, 1, "", "elbmf_step_ipalm"], [3, 4, 1, "", "integrality_gap_elastic"], [3, 4, 1, "", "proxelbmf"], [3, 4, 1, "", "proxelbmfbox"], [3, 4, 1, "", "proxelbmfnn"]], "PyBMF.models.ELBMFPyTorch.ELBMF": [[3, 2, 1, "", "fit"]], "PyBMF.models.FastStep": [[3, 1, 1, "", "FastStep"]], "PyBMF.models.FastStep.FastStep": [[3, 2, 1, "", "F"], [3, 2, 1, "", "check_params"], [3, 2, 1, "", "dF"], [3, 2, 1, "", "early_stop"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "init_model"]], "PyBMF.models.GreConD": [[3, 1, 1, "", "GreConD"], [3, 4, 1, "", "get_concept"]], "PyBMF.models.GreConD.GreConD": [[3, 2, 1, "", "fit"]], "PyBMF.models.GreConDPlus": [[3, 1, 1, "", "GreConDPlus"], [3, 4, 1, "", "expansion"]], "PyBMF.models.GreConDPlus.GreConDPlus": [[3, 2, 1, "", "fit"], [3, 2, 1, "", "remove_covered"], [3, 2, 1, "", "remove_overlapped"], [3, 2, 1, "", "set_extensions"]], "PyBMF.models.Hyper": [[3, 1, 1, "", "Hyper"]], "PyBMF.models.Hyper.Hyper": [[3, 2, 1, "", "cost"], [3, 2, 1, "", "find_hyper"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "init_itemsets"], [3, 2, 1, "", "init_model"], [3, 2, 1, "", "init_transactions"], [3, 2, 1, "", "sort_by_cost"]], "PyBMF.models.HyperPlus": [[3, 1, 1, "", "HyperPlus"], [3, 4, 1, "", "cost_savings"]], "PyBMF.models.HyperPlus.HyperPlus": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "fit"]], "PyBMF.models.IP": [[3, 1, 1, "", "IP"]], "PyBMF.models.MEBF": [[3, 1, 1, "", "MEBF"]], "PyBMF.models.MEBF.MEBF": [[3, 2, 1, "", "bidirectional_growth"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "get_factor"], [3, 2, 1, "", "get_weak_signal"], [3, 2, 1, "", "weak_signal_detection"]], "PyBMF.models.MaxSAT": [[3, 1, 1, "", "MaxSAT"]], "PyBMF.models.MaxSAT.MaxSAT": [[3, 2, 1, "", "fit"]], "PyBMF.models.MessagePassing": [[3, 1, 1, "", "MessagePassing"]], "PyBMF.models.MessagePassing.MessagePassing": [[3, 2, 1, "", "fit"]], "PyBMF.models.NMFSklearn": [[3, 1, 1, "", "NMFSklearn"]], "PyBMF.models.NMFSklearn.NMFSklearn": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "fit"]], "PyBMF.models.OrMachine": [[3, 1, 1, "", "OrMachine"]], "PyBMF.models.OrMachine.OrMachine": [[3, 2, 1, "", "fit"]], "PyBMF.models.PNLPF": [[3, 1, 1, "", "PNLPF"], [3, 4, 1, "", "get_prediction_with_sigmoid"], [3, 4, 1, "", "update_U"], [3, 4, 1, "", "update_V"]], "PyBMF.models.PNLPF.PNLPF": [[3, 2, 1, "", "get_prediction"], [3, 2, 1, "", "update_U"], [3, 2, 1, "", "update_V"]], "PyBMF.models.PRIMP": [[3, 1, 1, "", "PRIMP"], [3, 4, 1, "", "elbmf_ipalm"], [3, 4, 1, "", "elbmf_step_ipalm"], [3, 4, 1, "", "integrality_gap_elastic"], [3, 4, 1, "", "primp"], [3, 4, 1, "", "proxelbmf"], [3, 4, 1, "", "proxelbmfbox"], [3, 4, 1, "", "proxelbmfnn"]], "PyBMF.models.PRIMP.PRIMP": [[3, 2, 1, "", "fit"]], "PyBMF.models.PRIMPPyTorch": [[3, 1, 1, "", "PRIMP"], [3, 4, 1, "", "elbmf_ipalm"], [3, 4, 1, "", "elbmf_step_ipalm"], [3, 4, 1, "", "integrality_gap_elastic"], [3, 4, 1, "", "primp"], [3, 4, 1, "", "proxelbmf"], [3, 4, 1, "", "proxelbmfbox"], [3, 4, 1, "", "proxelbmfnn"]], "PyBMF.models.PRIMPPyTorch.PRIMP": [[3, 2, 1, "", "fit"]], "PyBMF.models.Panda": [[3, 1, 1, "", "Panda"]], "PyBMF.models.Panda.Panda": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "extend_core"], [3, 2, 1, "", "find_core"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "sort_items"]], "PyBMF.models.RSNMF": [[3, 1, 1, "", "RSNMF"]], "PyBMF.models.RSNMF.RSNMF": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "fit"]], "PyBMF.models.TransposedModel": [[3, 1, 1, "", "TransposedModel"]], "PyBMF.models.TransposedModel.TransposedModel": [[3, 2, 1, "", "fit"]], "PyBMF.models.WNMF": [[3, 1, 1, "", "WNMF"]], "PyBMF.models.WNMF.WNMF": [[3, 2, 1, "", "check_params"], [3, 2, 1, "", "error"], [3, 2, 1, "", "fit"], [3, 2, 1, "", "init_model"], [3, 2, 1, "", "update"]], "PyBMF.models.bmf_mp_ravanba": [[4, 0, 0, "-", "matrix_completion"], [4, 0, 0, "-", "utilities"]], "PyBMF.models.bmf_mp_ravanba.matrix_completion": [[4, 1, 1, "", "MatrixCompletion"]], "PyBMF.models.bmf_mp_ravanba.matrix_completion.MatrixCompletion": [[4, 2, 1, "", "init_msgs_n_marginals"], [4, 2, 1, "", "run"], [4, 2, 1, "", "update_adj_list"], [4, 2, 1, "", "update_margs"], [4, 2, 1, "", "update_min_sum"]], "PyBMF.models.bmf_mp_ravanba.utilities": [[4, 4, 1, "", "density"], [4, 4, 1, "", "get_random_matrices"], [4, 4, 1, "", "hamming"], [4, 4, 1, "", "log_ratio"], [4, 4, 1, "", "read_csv"], [4, 4, 1, "", "rec_error"]], "PyBMF.solvers": [[5, 4, 1, "", "line_search"], [5, 0, 0, "-", "line_search"]], "PyBMF.solvers.line_search": [[5, 4, 1, "", "line_search"]], "PyBMF.utils": [[6, 0, 0, "-", "boolean_utils"], [6, 0, 0, "-", "collective_display_utils"], [6, 0, 0, "-", "collective_evaluate_utils"], [6, 0, 0, "-", "collective_transform_utils"], [6, 0, 0, "-", "collective_utils"], [6, 0, 0, "-", "common"], [6, 0, 0, "-", "data_utils"], [6, 0, 0, "-", "dataframe_utils"], [6, 0, 0, "-", "decorator_utils"], [6, 0, 0, "-", "display"], [6, 0, 0, "-", "evaluate_utils"], [6, 0, 0, "-", "experiment_utils"], [6, 0, 0, "-", "generator_utils"], [6, 0, 0, "-", "metrics"], [6, 0, 0, "-", "sparse_utils"]], "PyBMF.utils.boolean_utils": [[6, 4, 1, "", "add"], [6, 4, 1, "", "dot"], [6, 4, 1, "", "ismat"], [6, 4, 1, "", "isnum"], [6, 4, 1, "", "matmul"], [6, 4, 1, "", "multiply"], [6, 4, 1, "", "power"], [6, 4, 1, "", "subtract"]], "PyBMF.utils.collective_display_utils": [[6, 4, 1, "", "get_settings"], [6, 4, 1, "", "sort_matrices"]], "PyBMF.utils.collective_evaluate_utils": [[6, 4, 1, "", "collective_cover"], [6, 4, 1, "", "harmonic_score"], [6, 4, 1, "", "weighted_score"]], "PyBMF.utils.collective_transform_utils": [[6, 4, 1, "", "concat_Us_into_U"], [6, 4, 1, "", "concat_Xs_into_X"], [6, 4, 1, "", "concat_factor_info"], [6, 4, 1, "", "split_U_into_Us"], [6, 4, 1, "", "split_X_into_Xs"]], "PyBMF.utils.collective_utils": [[6, 4, 1, "", "get_dummy_factor_info"], [6, 4, 1, "", "get_factor_dims"], [6, 4, 1, "", "get_factor_list"], [6, 4, 1, "", "get_factor_starts"], [6, 4, 1, "", "get_matrices"], [6, 4, 1, "", "split_factor_list"]], "PyBMF.utils.common": [[6, 4, 1, "", "binarize"], [6, 4, 1, "", "d_sigmoid"], [6, 4, 1, "", "get_prediction"], [6, 4, 1, "", "get_prediction_with_threshold"], [6, 4, 1, "", "get_residual"], [6, 4, 1, "", "get_rng"], [6, 4, 1, "", "safe_indexing"], [6, 4, 1, "", "to_interval"]], "PyBMF.utils.data_utils": [[6, 4, 1, "", "mean"], [6, 4, 1, "", "median"], [6, 4, 1, "", "sample"], [6, 4, 1, "", "sort_order"], [6, 4, 1, "", "sum"], [6, 4, 1, "", "summarize"]], "PyBMF.utils.dataframe_utils": [[6, 4, 1, "", "log2html"], [6, 4, 1, "", "log2latex"]], "PyBMF.utils.decorator_utils": [[6, 4, 1, "", "ignore_warnings"], [6, 4, 1, "", "timeit"]], "PyBMF.utils.display": [[6, 4, 1, "", "fill_nan"], [6, 4, 1, "", "get_size_inches"], [6, 4, 1, "", "show_factor_distribution"], [6, 4, 1, "", "show_matrix"]], "PyBMF.utils.evaluate_utils": [[6, 4, 1, "", "eval"], [6, 4, 1, "", "header"], [6, 4, 1, "", "record"]], "PyBMF.utils.experiment_utils": [[6, 4, 1, "", "get_model_by_path"], [6, 4, 1, "", "get_model_by_time"]], "PyBMF.utils.generator_utils": [[6, 4, 1, "", "add_noise"], [6, 4, 1, "", "reverse_index"], [6, 4, 1, "", "shuffle_by_dim"], [6, 4, 1, "", "shuffle_matrix"]], "PyBMF.utils.metrics": [[6, 4, 1, "", "ACC"], [6, 4, 1, "", "ERR"], [6, 4, 1, "", "F1"], [6, 4, 1, "", "FN"], [6, 4, 1, "", "FNR"], [6, 4, 1, "", "FP"], [6, 4, 1, "", "FPR"], [6, 4, 1, "", "MAE"], [6, 4, 1, "", "PPV"], [6, 4, 1, "", "RMSE"], [6, 4, 1, "", "TN"], [6, 4, 1, "", "TNR"], [6, 4, 1, "", "TP"], [6, 4, 1, "", "TPR"], [6, 4, 1, "", "coverage_score"], [6, 4, 1, "", "description_length"], [6, 4, 1, "", "get_metrics"], [6, 4, 1, "", "invert"], [6, 4, 1, "", "weighted_error"]], "PyBMF.utils.sparse_utils": [[6, 4, 1, "", "bool_to_index"], [6, 4, 1, "", "check_sparse"], [6, 4, 1, "", "index_to_bool"], [6, 4, 1, "", "sparse_indexing"], [6, 4, 1, "", "to_dense"], [6, 4, 1, "", "to_sparse"], [6, 4, 1, "", "to_triplet"]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function"}, "terms": {"": [1, 2, 3, 5, 6], "0": [1, 2, 3, 4, 5, 6], "00": 6, "0001": [3, 4], "001": 3, "01": 3, "02": 3, "03": 6, "04": 6, "06": 6, "07": 6, "08": 3, "1": [1, 2, 3, 4, 5, 6], "10": 3, "100": [3, 6], "1000": [3, 5], "10000000000": 3, "100k": 1, "100m": 1, "10k": 1, "15mb": 1, "17770": 1, "18": 7, "19": 3, "1d": 6, "1e": 3, "1m": 1, "2": [1, 2, 3, 4, 6], "20": 3, "2007": 3, "2011": 3, "2014": 2, "2015": 2, "2019": 2, "2022": 3, "24": 6, "2d": 6, "3": [2, 3, 6, 7], "30": 3, "3000": 3, "4": [5, 6], "43": 6, "43gb": 1, "480k": 1, "4945": 1, "4k": 6, "5": [1, 2, 3, 4, 6], "50": 3, "500": [3, 4], "6": 6, "608k": 1, "8": 6, "9": 7, "96": 6, "99": [3, 4], "A": [2, 3, 6, 7], "And": 3, "By": 3, "For": [3, 6], "If": [3, 6], "In": [3, 7], "It": [3, 5], "No": 1, "The": [1, 2, 3, 5, 6], "Their": 6, "Then": 3, "There": 6, "To": [3, 6], "Will": [3, 6], "With": 3, "__init__": 6, "_f": 3, "_fit": 3, "a95203b249c1cf392f86d001ad999e29b2392739": 3, "aaai2020": 7, "aaai2021": 7, "aaai2024": 7, "ab": 3, "abil": 7, "abl": 3, "absolut": 3, "acc": [0, 6, 7], "accept": [2, 6], "accord": 6, "accuraci": [3, 6], "across": 6, "activ": 7, "ad": [1, 3], "adapt": 7, "add": [0, 1, 2, 3, 6, 7], "add_nois": [0, 2, 6, 7], "addit": [3, 5, 6], "admit": 3, "advanc": 7, "affect": 3, "after": [3, 6], "ai": 7, "aim": 7, "al": [2, 3], "algorithm": [3, 7], "alia": 1, "all": [2, 3, 6], "allow": 6, "alpha": 3, "also": [3, 6], "altern": 3, "an": [1, 3], "ani": [1, 3, 7], "anoth": 3, "append": 1, "appli": [3, 6], "applic": [3, 6], "approach": 3, "approxim": 3, "approximate_x": [0, 3, 7], "apriori": 3, "ar": [1, 3, 6], "arbitrarili": 2, "area": 3, "arg": 5, "argument": [3, 5], "arithmet": 1, "around": 7, "arrai": [1, 2, 3, 6], "arrang": 2, "array_lik": 5, "ascend": 3, "assign": [1, 3], "asso": [0, 6, 7, 8], "assoc": 3, "associ": 3, "assoexalternatemultipleweight": [0, 7, 8], "assoit": [0, 7, 8], "assoopt": [0, 7, 8], "assum": 3, "attach": 3, "attribut": 1, "author": 7, "automat": 6, "auxilari": 3, "avail": 6, "avoid": 3, "axi": [1, 3, 6], "b": [2, 3, 6], "balanc": 3, "base": [1, 2, 3, 4], "basecollectivemodel": [0, 7, 8], "basedata": [0, 6, 7, 8], "basegener": [0, 7, 8], "basemodel": [0, 7, 8], "basemodeltool": [0, 7, 8], "basesplit": [0, 6, 7, 8], "basi": [3, 6], "basis_dim": 3, "basis_id": 3, "basis_list": 3, "batchsiz": 3, "been": 6, "befor": 3, "being": 1, "belief": 7, "belong": [3, 6], "beta": 3, "beta_loss": 3, "better": 3, "between": [2, 3], "bf": 3, "bi": [2, 3], "biclustervisu": 7, "bidirectional_growth": [0, 3, 7], "binar": [0, 3, 6, 7], "binari": [3, 6, 7], "binarymf": 7, "binarymfpenalti": [0, 7, 8], "binarymfpenaltyexcollect": [0, 7, 8], "binarymfthreshold": [0, 7, 8], "binarymfthresholdexcollect": [0, 7, 8], "binarymfthresholdexcolumnwis": [0, 7, 8], "binarymfthresholdexsigmoid": [0, 7, 8], "binarymfthresholdexsigmoidcolumnwis": [0, 7, 8], "binarymfthresholdexsigmoidcolumnwiselamda": [0, 7, 8], "bit": 3, "black": 6, "blob": [3, 6], "block": 2, "blockdiagonalmatrixgener": [0, 7, 8], "blockmatrixgener": [0, 7, 8], "bmf": [3, 7], "bmf_mp_ravanba": [0, 3, 7], "bmfaltern": [0, 7, 8], "bmfcollect": [0, 7, 8], "bmfinterleav": [0, 7, 8], "bmftool": [0, 7, 8], "bool": [3, 6], "bool_to_index": [0, 6, 7], "boolean": [1, 2, 3, 6, 7], "boolean_matmul": [0, 2, 7], "boolean_util": [0, 7, 8], "both": [1, 3, 6], "browser_path": 6, "build": 3, "build_assoc": [0, 3, 7], "build_basi": [0, 3, 7], "built": 7, "c": [3, 6, 7], "c1": 5, "c1p": 2, "c2": 5, "cach": 1, "call": 3, "callback": 3, "can": [1, 3, 6, 7], "candid": 3, "caption": 6, "case": 3, "cast": 1, "categori": 7, "cd": 3, "cell": 6, "center": [1, 2, 6], "chang": 3, "channel_neg": 3, "channel_po": 3, "check": [3, 6, 7], "check_converg": [0, 3, 7], "check_merg": [0, 3, 7], "check_overlap": [0, 2, 3, 7], "check_param": [0, 1, 2, 3, 7], "check_remov": [0, 3, 7], "check_spars": [0, 6, 7], "choos": 6, "chrome": 6, "class": [1, 2, 3, 4], "classifi": 6, "clim": [1, 2, 6], "cluster": 2, "cmap": 6, "cmax": 6, "cmf": [0, 6, 7, 8], "cmin": 6, "cnan": 6, "codenam": 3, "coeffici": 3, "col": 3, "collabor": [1, 3], "collect": [3, 6], "collective_cov": [0, 6, 7], "collective_display_util": [0, 7, 8], "collective_evaluate_util": [0, 7, 8], "collective_transform_util": [0, 7, 8], "collective_util": [0, 7, 8], "color": 6, "colorbar": [1, 2, 6], "colormap": 6, "column": [1, 2, 3, 4, 6], "columngener": 7, "columnwis": 3, "com": [1, 3, 6], "come": 1, "common": [0, 7, 8], "commonli": 3, "compar": 3, "compat": 5, "compet": 6, "compon": 3, "comput": [3, 6], "concat_factor_info": [0, 6, 7], "concat_us_into_u": [0, 6, 7], "concat_xs_into_x": [0, 6, 7], "concaten": [1, 6], "concept": 3, "conduct": 6, "confer": 3, "configur": 2, "consecut": 6, "consid": [3, 6], "const": 6, "contact": 7, "contain": 6, "content": 8, "contigu": 2, "continu": [3, 7], "continuouscollectivemodel": [0, 7, 8], "continuousmodel": [0, 7, 8], "contribut": 7, "control": 3, "convent": 6, "converg": 3, "convert": [2, 6], "coo": 3, "coo_matrix": 1, "coordin": 3, "copi": 3, "core": 3, "correl": 3, "cost": [0, 3, 6, 7], "cost_sav": [0, 3, 7], "counterpart": 3, "coupl": 3, "cover": [3, 6], "coverag": [3, 6], "coverage_scor": [0, 6, 7], "covergag": 6, "creat": 6, "criteria": 3, "cross": [1, 7], "crossvalid": [0, 7, 8], "csc": 3, "csc_matrix": 1, "csr": [1, 2, 3, 6], "csr_matrix": [1, 3], "cuda": 7, "current": [1, 2, 3, 7], "current_fold": 1, "custom": 3, "cv_negative_sampl": 1, "cython": 7, "d": 3, "d2f": [0, 3, 7], "d2xdx2": [0, 3, 7], "d_sigmoid": [0, 6, 7], "daatset": 3, "dalleig": 3, "dam2018": 7, "data": [1, 3, 6, 7], "data_idx": 1, "data_util": [0, 7, 8], "databas": 3, "datafram": [3, 6, 7], "dataframe_util": [0, 7, 8], "dataset": [0, 3, 7, 8], "deal": 3, "decid": 2, "decomposit": 3, "decorator_util": [0, 7, 8], "default": [3, 6], "defin": 6, "delegationbmf": 7, "delimit": 4, "demo": [0, 3, 7], "dens": [2, 3, 6], "densiti": [2, 3, 4], "depend": 6, "depth": 6, "descend": 3, "descent": 3, "describ": 3, "descript": [2, 3, 6], "description_length": [0, 6, 7], "design": 1, "detect": 3, "determin": 3, "develop": [3, 7], "df": [0, 3, 7], "df_dict": 6, "df_info": 1, "df_name": [3, 6], "dh": 3, "diagnosi": 7, "diagon": 2, "dict": [3, 5, 6], "diff": 3, "diff_threshold": 3, "differ": [3, 6], "differenti": 6, "dim": [1, 3, 6], "dimens": [3, 6], "direct": [3, 5], "directori": [1, 6], "discoveri": 3, "discret": [1, 2, 3, 6], "displai": [0, 3, 7, 8], "distribut": 6, "dmkd2017": 7, "do": 3, "doc": 6, "doe": [1, 3, 6], "dot": [0, 6, 7], "down": [1, 6], "dpi": 6, "drop": 3, "dtype": 6, "du": 3, "du_lamda": 3, "dummi": 6, "dump": 1, "dump_pickl": [0, 1, 7], "dv": 3, "dv_lamda": 3, "dw": 3, "dxdlamda": [0, 3, 7], "dxdx": [0, 3, 7], "e": [1, 3, 6], "each": [1, 2, 3, 6], "earli": 3, "early_stop": [0, 3, 7], "effect": 1, "effici": 3, "elast": 3, "elbmf": [0, 7, 8], "elbmf_ipalm": [0, 3, 7], "elbmf_step_ipalm": [0, 3, 7], "elbmfnumpi": [0, 7, 8], "elbmfpytorch": [0, 7, 8], "element": [2, 3], "eliminate_zero": 1, "empti": [1, 3], "end": 3, "enforc": 6, "entranc": 3, "entri": 3, "equal": 6, "err": [0, 6, 7], "error": [0, 1, 3, 6, 7], "especi": 6, "et": [2, 3], "eval": [0, 6, 7], "evalu": [0, 3, 6, 7], "evaluate_util": [0, 7, 8], "everi": 3, "evolv": 7, "ex": 6, "exact": 3, "exact_decomp": 3, "exampl": 7, "exclus": 3, "exclusive_cost": [0, 3, 7], "exclusive_dl": [0, 3, 7], "exclusive_scor": [0, 3, 7], "exhaust": 3, "exist": 6, "expans": [0, 3, 7], "experi": 3, "experiment": 3, "experiment_util": [0, 7, 8], "explicit": 6, "extend": 3, "extend_cor": [0, 3, 7], "extend_factor": [0, 3, 7], "extens": 3, "extern": 3, "extract": 3, "f": [0, 3, 5, 6, 7], "f0": 3, "f1": [0, 3, 6, 7], "face": 3, "factor": [0, 1, 2, 3, 6, 7], "factor_id": 1, "factor_info": [1, 2, 6], "factor_list": 6, "factor_start": 6, "fair": 7, "fall": 6, "fals": [1, 2, 3, 4, 6], "fast": [1, 3], "fast_undercov": 3, "faststep": [0, 7, 8], "featur": 3, "felixni": 1, "figur": 6, "file": [1, 6], "file_nam": 6, "file_path": 6, "fill": 6, "fill_nan": [0, 6, 7], "filter": 3, "find": 3, "find_cor": [0, 3, 7], "find_hyp": [0, 3, 7], "finish": [0, 3, 7], "first": [3, 6], "fit": [0, 3, 7], "fix": [3, 6, 7], "flexibl": 6, "float": [1, 2, 3, 5, 6], "fn": [0, 3, 6, 7], "fname": 4, "fnr": [0, 6, 7], "fold": 1, "follow": [3, 6], "fontsiz": 6, "form": [1, 2], "fot": 6, "found": 3, "fp": [0, 6, 7], "fpr": [0, 6, 7], "fraction": [1, 3], "framework": [3, 7], "frequenc": 3, "frequent": 3, "frobeniu": 3, "from": [1, 3, 5, 6, 7], "full": [1, 3], "fulli": 3, "func": 6, "function": [3, 5, 6], "g": [3, 6], "gamma": 3, "gap": 6, "gauss": 3, "gener": [0, 3, 6, 7, 8], "generate_factor": [0, 2, 7], "generate_factor_point": [0, 2, 7], "generator_util": [0, 7, 8], "genr": 1, "geometr": 3, "get": [3, 6, 7], "get_attribute_info": [0, 1, 7], "get_basis_dim": [0, 3, 7], "get_concept": [0, 3, 7], "get_dummy_factor_info": [0, 6, 7], "get_factor": [0, 3, 7], "get_factor_dim": [0, 6, 7], "get_factor_list": [0, 6, 7], "get_factor_start": [0, 6, 7], "get_fold": [0, 1, 7], "get_indic": [0, 1, 7], "get_integrality_gap": [0, 3, 7], "get_matric": [0, 6, 7], "get_metr": [0, 3, 6, 7], "get_model_by_path": [0, 6, 7], "get_model_by_tim": [0, 6, 7], "get_neg_indic": [0, 1, 7], "get_overlap": [0, 3, 7], "get_partit": [0, 1, 7], "get_predict": [0, 3, 6, 7], "get_prediction_with_sigmoid": [0, 3, 7], "get_prediction_with_threshold": [0, 6, 7], "get_random_matric": [3, 4], "get_refined_column": [0, 3, 7], "get_residu": [0, 6, 7], "get_rng": [0, 6, 7], "get_set": [0, 6, 7], "get_siz": [0, 1, 7], "get_size_inch": [0, 6, 7], "get_user_profil": [0, 1, 7], "get_vector": [0, 3, 7], "get_weak_sign": [0, 3, 7], "get_x_pd_rest": [0, 3, 7], "github": [1, 3, 6], "given": [1, 3, 6], "global": 3, "googl": 6, "gradient": [3, 5], "grai": 6, "greater_id_onli": 3, "grecond": [0, 7, 8], "grecondplu": [0, 7, 8], "greedi": 7, "ground": [3, 6], "grow": 3, "growth": 3, "gt": 6, "guid": 6, "h_0": 3, "h_1": 3, "ha": [1, 6, 7], "hadamard": 6, "ham": [3, 4], "harmon": 6, "harmonic_scor": [0, 6, 7], "has_pickl": [0, 1, 7], "hat": 3, "have": [3, 6, 7], "hd": 6, "head": 3, "head_info": 3, "header": [0, 6, 7], "heavisid": 6, "height": 6, "height_cel": 6, "height_inch": 6, "help": 7, "helper": 3, "here": 3, "hess": 2, "heurist": 7, "high": [2, 6], "higher": [3, 6], "highlight": 6, "hit": 6, "hold": 7, "how": 1, "html": 6, "http": [1, 3, 6], "hyper": [0, 7, 8], "hyperplu": [0, 7, 8], "hyperrectangl": 3, "i": [1, 2, 3, 6, 7], "i_0": 3, "i_1": 3, "icdm2007": 7, "icdm2010": 7, "iclm2017": 7, "icml2016": 7, "id": [3, 6], "identifi": [3, 6], "idx": [1, 3, 6], "ignor": 6, "ignore_warn": [0, 6, 7], "imag": 3, "imdb": 1, "implement": [3, 5, 7], "import": [3, 5, 7], "import_model": [0, 3, 7], "improv": 3, "inch": 6, "includ": [3, 6, 7], "incorpor": 7, "increas": 3, "index": [1, 2, 6, 7], "index_to_bool": [0, 6, 7], "indic": [1, 3, 4, 6], "individu": 6, "inerti": 3, "inf": 3, "inform": [1, 3], "inherit": 3, "init": 3, "init_basi": [0, 3, 7], "init_basis_asso": [0, 3, 7], "init_basis_random_bit": [0, 3, 7], "init_basis_random_row": [0, 3, 7], "init_cov": [0, 3, 7], "init_factor": [0, 3, 7], "init_itemset": [0, 3, 7], "init_method": 3, "init_model": [0, 3, 7], "init_msgs_n_margin": [3, 4], "init_transact": [0, 3, 7], "init_u": [0, 3, 7], "init_uv": [0, 3, 7], "init_w": [0, 3, 7], "initi": [1, 3], "inner": 6, "input": [3, 6], "instead": 3, "int": [1, 2, 3, 5, 6], "int2bin": [0, 3, 7], "integ": 1, "integrality_gap_elast": [0, 3, 7], "interest": 7, "interv": 6, "intract": 1, "inv": 6, "invert": [0, 6, 7], "involv": 3, "ip": [0, 7, 8], "ipalm": [0, 3, 7], "is2019": 7, "is_improv": 3, "is_overlap": [0, 2, 7], "ismat": [0, 6, 7], "isnum": [0, 6, 7], "item": [1, 3, 6], "itemset": 3, "iter": [3, 5], "iteress": 7, "its": [2, 3, 6], "jcss2010": 7, "jill": 3, "join": 3, "joint": 1, "julia": 7, "k": [1, 2, 3, 4, 6], "kai": 3, "karaev": 2, "keep": [3, 6], "keep_nan": [1, 2, 6], "keyword": 5, "known": [3, 6, 7], "kwarg": [1, 2, 3, 5], "l": 3, "l1": 3, "l158": 3, "l1reg": 3, "l2": 3, "l2reg": 3, "lambda": 3, "lamda": 3, "lamda_r": 3, "larg": 1, "larger": 3, "last": 3, "lazi": 3, "lazili": 3, "lazy_upd": 3, "learn": [3, 6], "learning_r": 4, "leav": 1, "len": 3, "length": [1, 3, 6], "less": 6, "level": 6, "li": 2, "librari": 7, "like": 6, "lil": 3, "lil_matrix": [1, 6], "limit": 6, "line": [3, 5, 7], "line_search": [0, 7, 8], "linear": 7, "link": [3, 7], "link_lamda": 3, "list": [1, 2, 3, 4, 6], "ll": 3, "load": [0, 1, 3, 7], "load_data": [0, 1, 7], "load_dataset": [0, 3, 7], "load_neg_data": [0, 1, 6, 7], "load_pos_data": [0, 1, 7], "locat": 6, "log": [3, 6, 7], "log2html": [0, 6, 7], "log2latex": [0, 6, 7], "log_ratio": [3, 4], "logic": 6, "lose": 1, "loss": 3, "low": 2, "lower": [3, 6], "lr": 3, "lucches": 2, "m": [2, 3, 4], "mae": [0, 6, 7], "mai": [3, 6], "make": [2, 3, 6], "manag": 3, "maric": 6, "mask": [3, 4, 6, 7], "master": 6, "match": 3, "matlab": 7, "matmul": [0, 6, 7], "matric": [2, 3, 6, 7], "matrix": [1, 2, 3, 6, 7], "matrix_complet": [0, 3, 7], "matrixcomplet": [3, 4], "matter": 3, "max": 6, "max_it": [3, 4], "max_reg": 3, "max_round": 3, "maxim": [3, 6], "maximum": [3, 5, 6], "maxit": [3, 5], "maxsat": [0, 7, 8], "mean": [0, 3, 6, 7], "measur": [0, 2, 3, 6, 7], "measure_dens": [0, 2, 7], "measure_overlap": [0, 2, 7], "measured_dens": 2, "measured_overlap": 2, "mebf": [0, 7, 8], "median": [0, 3, 6, 7], "merg": 3, "messagepass": [0, 7, 8], "method": [2, 3, 7], "metric": [0, 3, 7, 8], "mexican": 3, "mf": 3, "middl": 3, "miettinen": 2, "min": [3, 6], "min_diff": 3, "min_sum": 4, "min_support": 3, "mine": [3, 7], "minim": [3, 5, 6], "miss": [3, 6], "mode": 3, "model": [0, 6, 8], "model_nam": 6, "modifi": [3, 6], "modul": 8, "monoton": 3, "more": 3, "movielen": 1, "movielensdata": [0, 7, 8], "movielensgenrecastdata": [0, 7, 8], "movielensgenrecastuserdata": [0, 7, 8], "movielensuserdata": [0, 7, 8], "msg": 3, "mu": 3, "much": 3, "multi": [1, 6, 7], "multipl": [3, 6, 7], "multipli": [0, 6, 7], "must": [3, 6], "myfprim": 5, "n": [2, 3, 4, 6], "n_basi": [3, 6], "n_compon": 3, "n_factor": 3, "n_fold": 1, "n_iter": 3, "n_neg": 1, "n_rate": 1, "n_round": 3, "n_sampl": [1, 6], "n_submat": 6, "name": [1, 3, 6], "nan": 6, "nassau": 7, "natur": 2, "nbm": 4, "ncompon": 3, "ndarrai": [3, 6], "necessari": [3, 6, 7], "need": 1, "neg": [1, 2, 3, 6, 7], "negative_sampl": [0, 1, 3, 7], "neighbor": 3, "net": 3, "netflix": 1, "netflixdata": [0, 7, 8], "netflixgenrecastdata": [0, 7, 8], "neural": 3, "neurip": 3, "new": 3, "newton_upd": [0, 3, 7], "nips2022": 7, "nmf": [3, 7], "nmfsklearn": [0, 7, 8], "nndsvd": 3, "nois": [2, 3, 6], "non": 3, "none": [1, 2, 3, 4, 6], "nonneg": 3, "nonzero": 4, "normal": 3, "normalize_uv": [0, 3, 7], "nosplit": [0, 7, 8], "note": [1, 3, 6], "novel": 3, "now": 3, "np": [2, 3, 6], "number": [1, 2, 3, 5, 6], "numpi": 3, "o": 4, "object": [1, 2, 3, 4, 5], "observ": 3, "obtain": 3, "onc": 6, "one": [3, 6], "onli": [1, 3, 6], "onto": 1, "open_brows": 6, "oper": [1, 3], "optim": [3, 5, 7], "option": [2, 3, 6], "order": [1, 3, 6], "orderedbmf": 7, "org": 6, "org_a": 3, "organ": 4, "origin": 7, "ormachin": [0, 7, 8], "other": [3, 6], "otherwis": 3, "out": [2, 6], "output": 6, "outsid": 3, "over": [3, 6], "overal": 6, "overcov": 3, "overlap": [2, 3], "overlap_dim": 3, "overlap_flag": 2, "overlap_id": 3, "overleaf": 6, "overwrit": [1, 3, 6], "overwrite_cach": 1, "own": [6, 7], "p": 3, "p_0_given_0": 4, "p_1_given_1": 4, "p_flip": 4, "p_neg": [2, 6], "p_observ": 4, "p_po": [2, 6], "p_x_1": 4, "p_y_1": 4, "packag": [7, 8], "page": 7, "pair": [3, 6], "pakdd2016": 7, "palm": 7, "panda": [0, 6, 7, 8], "paper": [2, 3, 7], "parallel": 3, "param": 3, "paramet": 7, "part": 3, "partit": 1, "pass": 5, "path": 1, "path_list": 6, "pattern": [3, 7], "pd": 6, "penalti": [3, 7], "per": 6, "percentag": 2, "pf": 7, "pick": 3, "pickl": 1, "pivel": 6, "pixel": [1, 2, 3, 6], "pk": 5, "pkdd2006": 7, "pkdd2023": 7, "place": 2, "plai": 7, "playground": 7, "pleas": [6, 7], "pnl": 7, "pnlpf": [0, 7, 8], "point": [5, 6], "points_end": 2, "points_end_u": 2, "points_end_v": 2, "points_start": 2, "points_start_u": 2, "points_start_v": 2, "popular": 1, "posit": [2, 3, 6], "possibl": 3, "power": [0, 6, 7], "ppi": 6, "ppv": [0, 6, 7], "precis": [3, 6], "predict": [1, 3, 6], "predict_x": [0, 3, 7], "prefer": [3, 7], "prepar": 3, "presenc": 3, "preserv": 6, "previou": 3, "primp": [0, 2, 7, 8], "primppytorch": [0, 7, 8], "print": 3, "print_loss": [0, 3, 7], "print_msg": [0, 3, 7], "prior_u": 3, "prior_v": 3, "prize": 1, "probabl": 2, "probablist": 7, "problem": [3, 7], "procedur": [2, 3], "process": 3, "produc": 2, "product": [3, 6], "profil": 1, "program": 6, "project": 3, "properti": [1, 2], "prosper": 7, "provid": [3, 6, 7], "prox": [0, 3, 7], "proxelbmf": [0, 3, 7], "proxelbmfbox": [0, 3, 7], "proxelbmfnn": [0, 3, 7], "proxim": 3, "py": [3, 6, 7], "python": [6, 7], "question": 7, "queue": 3, "r": 7, "rainbow": 6, "random": [3, 6], "random_se": 3, "randomli": [1, 3, 6], "rang": [6, 7], "rank": [2, 3], "rate": [1, 3, 6], "rather": 6, "ratio": [1, 3, 6], "ratiosplit": [0, 7, 8], "re": [2, 3, 5], "re_init": 3, "read": 1, "read_csv": [3, 4], "read_data": [0, 1, 7], "read_pickl": [0, 1, 7], "real": [3, 6, 7], "rec_error": [0, 3, 4, 7], "recal": [3, 6], "recommend": 3, "reconstruct": [1, 3, 6], "record": [0, 1, 3, 6, 7], "refer": 6, "refine_overlap": [0, 3, 7], "reg": 3, "reg_error": [0, 3, 7], "reg_growth": 3, "reg_l1": 3, "reg_l2": 3, "regrad": 6, "regular": [3, 6], "regularization_r": 3, "reinit_basi": [0, 3, 7], "relat": [3, 6], "relax": 3, "remain": 3, "remov": [0, 3, 7], "remove_cov": [0, 3, 7], "remove_overlap": [0, 3, 7], "repres": 2, "requir": 3, "research": 7, "reserv": 3, "reset": [0, 3, 7], "residu": [3, 6], "resolut": [3, 6], "rest": 1, "result": 6, "revers": 6, "reverse_index": [0, 6, 7], "rmse": [0, 6, 7], "rng": [2, 6], "root": 6, "round": 3, "row": [1, 2, 3, 4, 6], "rsnmf": [0, 7, 8], "run": [3, 4], "s_old": 3, "safe_index": [0, 6, 7], "same": [1, 3, 6], "sampl": [0, 1, 3, 6, 7], "saniti": 6, "satisfi": 7, "save": [3, 6, 7], "save_fig": 6, "save_model": 3, "saved_model": 6, "scale": [1, 2, 3, 6], "schedul": 3, "scheme": [2, 3], "scikit": [3, 6], "scipi": [3, 5, 6], "score": [3, 6], "screen": 6, "sdm2015": 7, "search": [3, 5, 7], "sebastian": 3, "see": 3, "seed": [1, 2, 3, 6], "segment": 3, "seidel": 3, "select": [1, 3, 6], "self": [2, 3], "sensit": 6, "separ": 6, "seper": 6, "seri": 6, "set": [1, 2, 3, 6], "set_config": [0, 2, 3, 7], "set_extens": [0, 3, 7], "set_factor": [0, 3, 7], "set_factor_info": [0, 2, 7], "set_init_ord": [0, 3, 7], "set_optimal_row": [0, 3, 7], "set_param": [0, 2, 3, 7], "set_update_ord": [0, 3, 7], "sever": 6, "shape": 3, "share": [3, 6], "short": 3, "should": [1, 3], "show": [3, 6], "show_factor_distribut": [0, 6, 7], "show_log": 3, "show_matrix": [0, 1, 2, 3, 6, 7], "show_result": 3, "shuffl": [0, 2, 6, 7], "shuffle_by_dim": [0, 6, 7], "shuffle_factor": [0, 2, 7], "shuffle_matrix": [0, 6, 7], "siam2019": 7, "sibyl": 2, "side": 6, "sigkdd": 3, "sigkdd2011": 7, "sigmmoid": 3, "sigmoid": 3, "sigmoid_link": 3, "signal": 3, "similar": 2, "simpl": 6, "simpli": 3, "simplif": 7, "simul": 3, "singl": [1, 3, 6, 7], "sixth": 3, "size": [1, 6], "size_rang": 2, "sklearn": [3, 6, 7], "slow": [3, 6], "small": 1, "smaller": 3, "so": [3, 6], "solv": 3, "solver": [0, 3, 7, 8], "some": [3, 6], "sometim": 3, "sort": [1, 2, 3, 6], "sort_by_cost": [0, 3, 7], "sort_factor": [0, 1, 7], "sort_item": [0, 3, 7], "sort_matric": [0, 6, 7], "sort_ord": [0, 6, 7], "sorted_index": [0, 2, 7], "sortout": [0, 2, 7], "sourc": [1, 2, 3, 4, 5, 6], "sp2021": 7, "spamtrix": 6, "spars": [2, 3, 6, 7], "sparse_index": [0, 6, 7], "sparse_util": [0, 7, 8], "sparsiti": 6, "specif": 6, "split": [1, 3, 6, 7], "split_factor_list": [0, 6, 7], "split_u_into_u": [0, 6, 7], "split_x_into_x": [0, 6, 7], "spmatrix": [1, 3, 6], "spyder": 6, "squeez": 6, "start": [1, 3, 5, 6, 7], "state": 2, "static": [1, 3], "step": [0, 3, 6, 7], "stop": 3, "store": 6, "str": [1, 3, 6], "string": 6, "sttr_list": 1, "sttr_mat": 1, "submatrix": 6, "submodul": [0, 7, 8], "subpackag": 8, "subsampl": 6, "subset": 6, "subtitl": 6, "subtract": [0, 6, 7], "suggest": 7, "sum": [0, 6, 7], "summar": [0, 3, 6, 7], "summari": 6, "support": [1, 3, 6], "suptitl": 6, "switch": 3, "synthet": [2, 7], "syntheticmatrixgener": [0, 7, 8], "t": 3, "t_0": 3, "t_1": 3, "tail": 2, "take": [3, 6], "target_dim": 3, "target_k": 3, "task": [1, 3, 6], "tau": 3, "technologi": 7, "term": 3, "test": [1, 3, 7], "test_idx": 1, "test_info": 3, "test_metr": 3, "test_siz": 1, "tex": 6, "th": 3, "than": [3, 6], "thei": 3, "them": [3, 6], "thi": [1, 2, 3, 6], "thing": 3, "thirti": 3, "those": [2, 3, 6, 7], "threshold": [3, 6, 7], "through": 3, "throughout": 7, "thu": [3, 6], "time": 6, "time_end": 6, "time_start": 6, "timeit": [0, 6, 7], "titl": 6, "tkde2008": 7, "tkde2013": 7, "tmdb": 1, "tn": [0, 6, 7], "tnr": [0, 6, 7], "to_dens": [0, 2, 6, 7], "to_interv": [0, 6, 7], "to_singl": [0, 1, 7], "to_spars": [0, 2, 6, 7], "to_triplet": [0, 6, 7], "todo": [3, 6], "togeth": 2, "tol": [3, 4], "toler": 3, "tool": [3, 6, 7], "top": 3, "tp": [0, 3, 6, 7], "tpr": [0, 6, 7], "train": [1, 3], "train_idx": 1, "train_info": 3, "train_metr": 3, "train_siz": 1, "train_val_s": 1, "transact": 3, "transform": 6, "transpos": [3, 6], "transposedmodel": [0, 7, 8], "treat": 3, "trial": 1, "triplet": [1, 6], "true": [1, 2, 3, 4, 6], "truncate_factor": [0, 3, 7], "truth": [3, 6], "tunabl": 2, "tupl": [5, 6], "turn": [3, 6], "two": 3, "type": [1, 2, 3, 6, 7], "typic": 2, "u": [2, 3, 6, 7], "u01": 3, "u0k": 3, "u1": 3, "u_al": 3, "u_exp": 3, "u_lamda": 3, "u_last": 3, "uir": 6, "uk": 3, "un1": 3, "unchang": 3, "unclassifi": 6, "uncov": 3, "uncoverag": 3, "under": [3, 7], "undercoverbmf": 7, "unifi": [3, 7], "uniform": [1, 3], "unk": 3, "uold": 3, "up": [3, 6], "updat": [0, 3, 6, 7], "update_adj_list": [3, 4], "update_basi": [0, 3, 7], "update_basis_dim": [0, 3, 7], "update_cov": [0, 3, 7], "update_marg": [3, 4], "update_min_sum": [3, 4], "update_u": [0, 3, 7], "update_v": [0, 3, 7], "update_weight": [0, 3, 7], "upon": [2, 3], "us": [1, 2, 3, 6], "user": [1, 3], "util": [0, 3, 7, 8], "v": [2, 3, 6], "v1": 3, "v_all": 3, "v_exp": 3, "v_lamda": 3, "val": [1, 3], "val_idx": 1, "val_info": 3, "val_metr": 3, "val_siz": 1, "valid": [1, 3, 7], "valu": [1, 2, 3, 6], "vanilla": 6, "vari": 3, "variabl": 3, "variou": 7, "vector": [3, 6], "verbos": [3, 4, 6], "version": 3, "via": 3, "visual": [3, 7], "vk": 3, "vreeken": [2, 3], "w": [3, 6, 7], "w_fn": [3, 6], "w_fp": [3, 6], "w_list": 3, "w_model": [3, 6], "w_schedul": [0, 3, 7], "wai": [6, 7], "want": 3, "we": [1, 3, 7], "weak": 3, "weak_signal_detect": [0, 3, 7], "weight": [3, 6], "weighted_error": [0, 6, 7], "weighted_scor": [0, 6, 7], "welcom": 7, "well": [3, 7], "when": [1, 2, 3, 6], "where": 1, "whether": [3, 6], "which": [3, 6, 7], "while": [3, 6], "white": 6, "whole": [1, 3, 6], "whose": 3, "wide": 7, "width": 6, "width_cel": 6, "width_inch": 6, "wise": [3, 6], "with_round": 3, "within": 6, "without": 2, "wnmf": [0, 7, 8], "wolf": 5, "work": 7, "world": 7, "wrapper": [1, 2, 3, 6, 7], "x": [1, 2, 3, 4, 6], "x_gt": [3, 6], "x_old": 3, "x_pd": [3, 6], "x_pd_rest": 3, "x_r": 3, "x_test": [1, 3], "x_train": 3, "x_val": [1, 3], "xiang": 3, "xk": 5, "xs_test": 3, "xs_train": 3, "xs_val": 3, "y": [4, 6], "year": 7, "you": [3, 7], "your": [6, 7], "z": 4, "zero": [3, 6], "zh": 4, "zhang": 3, "zhengyaochang": 3}, "titles": ["PyBMF package", "PyBMF.datasets package", "PyBMF.generators package", "PyBMF.models package", "PyBMF.models.bmf_mp_ravanba package", "PyBMF.solvers package", "PyBMF.utils package", "PyBMF", "PyBMF"], "titleterms": {"TO": 7, "asso": 3, "assoexalternatemultipleweight": 3, "assoit": 3, "assoopt": 3, "basecollectivemodel": 3, "basedata": 1, "basegener": 2, "basemodel": 3, "basemodeltool": 3, "basesplit": 1, "binarymfpenalti": 3, "binarymfpenaltyexcollect": 3, "binarymfthreshold": 3, "binarymfthresholdexcollect": 3, "binarymfthresholdexcolumnwis": 3, "binarymfthresholdexsigmoid": 3, "binarymfthresholdexsigmoidcolumnwis": 3, "binarymfthresholdexsigmoidcolumnwiselamda": 3, "blockdiagonalmatrixgener": 2, "blockmatrixgener": 2, "bmf_mp_ravanba": 4, "bmfaltern": 3, "bmfcollect": 3, "bmfinterleav": 3, "bmftool": 3, "boolean_util": 6, "cmf": 3, "collective_display_util": 6, "collective_evaluate_util": 6, "collective_transform_util": 6, "collective_util": 6, "common": 6, "compat": 7, "configur": 3, "content": [0, 1, 2, 3, 4, 5, 6, 7], "continuouscollectivemodel": 3, "continuousmodel": 3, "crossvalid": 1, "data_util": 6, "dataframe_util": 6, "dataset": 1, "decorator_util": 6, "demo": 4, "displai": 6, "do": 7, "elbmf": 3, "elbmfnumpi": 3, "elbmfpytorch": 3, "evaluate_util": 6, "exampl": 6, "experiment_util": 6, "faststep": 3, "gener": 2, "generator_util": 6, "grecond": 3, "grecondplu": 3, "how": 7, "hyper": 3, "hyperplu": 3, "indic": 7, "ip": 3, "line_search": 5, "matrix_complet": 4, "maxsat": 3, "mebf": 3, "messagepass": 3, "metric": 6, "model": [3, 4, 7], "modul": [0, 1, 2, 3, 4, 5, 6, 7], "movielensdata": 1, "movielensgenrecastdata": 1, "movielensgenrecastuserdata": 1, "movielensuserdata": 1, "netflixdata": 1, "netflixgenrecastdata": 1, "nmfsklearn": 3, "nosplit": 1, "ormachin": 3, "packag": [0, 1, 2, 3, 4, 5, 6], "panda": 3, "paramet": [2, 3, 5, 6], "pnlpf": 3, "primp": 3, "primppytorch": 3, "prospect": 7, "pybmf": [0, 1, 2, 3, 4, 5, 6, 7, 8], "ratiosplit": 1, "refer": 3, "return": [1, 2, 3, 6], "rsnmf": 3, "solver": 5, "sparse_util": 6, "submodul": [1, 2, 3, 4, 5, 6], "subpackag": [0, 3, 7], "syntheticmatrixgener": 2, "system": 3, "tabl": 7, "transposedmodel": 3, "us": 7, "util": [4, 6], "wnmf": 3}})